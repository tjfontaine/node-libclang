// Copyright 2013 Timothy J Fontaine <tjfontaine@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE

var FFI = require('ffi-napi'),
    ref = require('ref-napi'),
    ArrayType = require('ref-array-di')(ref),
    Struct = require('ref-struct-di')(ref),
    Union = require('ref-union-di')(ref);

var voidPtr = ref.refType(ref.types.void);

exports.CONSTANTS = {
    'CXErrorCode': {
        CXError_Success: 0,
        CXError_Failure: 1,
        CXError_Crashed: 2,
        CXError_InvalidArguments: 3,
        CXError_ASTReadError: 4,
        '0': 'CXError_Success',
        '1': 'CXError_Failure',
        '2': 'CXError_Crashed',
        '3': 'CXError_InvalidArguments',
        '4': 'CXError_ASTReadError',
    },
    'CXDiagnosticSeverity': {
        CXDiagnostic_Ignored: 0,
        CXDiagnostic_Note: 1,
        CXDiagnostic_Warning: 2,
        CXDiagnostic_Error: 3,
        CXDiagnostic_Fatal: 4,
        '0': 'CXDiagnostic_Ignored',
        '1': 'CXDiagnostic_Note',
        '2': 'CXDiagnostic_Warning',
        '3': 'CXDiagnostic_Error',
        '4': 'CXDiagnostic_Fatal',
    },
    'CXTUResourceUsageKind': {
        CXTUResourceUsage_AST: 1,
        CXTUResourceUsage_Identifiers: 2,
        CXTUResourceUsage_Selectors: 3,
        CXTUResourceUsage_GlobalCompletionResults: 4,
        CXTUResourceUsage_SourceManagerContentCache: 5,
        CXTUResourceUsage_AST_SideTables: 6,
        CXTUResourceUsage_SourceManager_Membuffer_Malloc: 7,
        CXTUResourceUsage_SourceManager_Membuffer_MMap: 8,
        CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc: 9,
        CXTUResourceUsage_ExternalASTSource_Membuffer_MMap: 10,
        CXTUResourceUsage_Preprocessor: 11,
        CXTUResourceUsage_PreprocessingRecord: 12,
        CXTUResourceUsage_SourceManager_DataStructures: 13,
        CXTUResourceUsage_Preprocessor_HeaderSearch: 14,
        CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN: 1,
        CXTUResourceUsage_MEMORY_IN_BYTES_END: 14,
        CXTUResourceUsage_First: 1,
        CXTUResourceUsage_Last: 14,
        '1': 'CXTUResourceUsage_AST',
        '2': 'CXTUResourceUsage_Identifiers',
        '3': 'CXTUResourceUsage_Selectors',
        '4': 'CXTUResourceUsage_GlobalCompletionResults',
        '5': 'CXTUResourceUsage_SourceManagerContentCache',
        '6': 'CXTUResourceUsage_AST_SideTables',
        '7': 'CXTUResourceUsage_SourceManager_Membuffer_Malloc',
        '8': 'CXTUResourceUsage_SourceManager_Membuffer_MMap',
        '9': 'CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc',
        '10': 'CXTUResourceUsage_ExternalASTSource_Membuffer_MMap',
        '11': 'CXTUResourceUsage_Preprocessor',
        '12': 'CXTUResourceUsage_PreprocessingRecord',
        '13': 'CXTUResourceUsage_SourceManager_DataStructures',
        '14': 'CXTUResourceUsage_Preprocessor_HeaderSearch',
        '1': 'CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN',
        '14': 'CXTUResourceUsage_MEMORY_IN_BYTES_END',
        '1': 'CXTUResourceUsage_First',
        '14': 'CXTUResourceUsage_Last',
    },
    'CXCursorKind': {
        CXCursor_UnexposedDecl: 1,
        CXCursor_StructDecl: 2,
        CXCursor_UnionDecl: 3,
        CXCursor_ClassDecl: 4,
        CXCursor_EnumDecl: 5,
        CXCursor_FieldDecl: 6,
        CXCursor_EnumConstantDecl: 7,
        CXCursor_FunctionDecl: 8,
        CXCursor_VarDecl: 9,
        CXCursor_ParmDecl: 10,
        CXCursor_ObjCInterfaceDecl: 11,
        CXCursor_ObjCCategoryDecl: 12,
        CXCursor_ObjCProtocolDecl: 13,
        CXCursor_ObjCPropertyDecl: 14,
        CXCursor_ObjCIvarDecl: 15,
        CXCursor_ObjCInstanceMethodDecl: 16,
        CXCursor_ObjCClassMethodDecl: 17,
        CXCursor_ObjCImplementationDecl: 18,
        CXCursor_ObjCCategoryImplDecl: 19,
        CXCursor_TypedefDecl: 20,
        CXCursor_CXXMethod: 21,
        CXCursor_Namespace: 22,
        CXCursor_LinkageSpec: 23,
        CXCursor_Constructor: 24,
        CXCursor_Destructor: 25,
        CXCursor_ConversionFunction: 26,
        CXCursor_TemplateTypeParameter: 27,
        CXCursor_NonTypeTemplateParameter: 28,
        CXCursor_TemplateTemplateParameter: 29,
        CXCursor_FunctionTemplate: 30,
        CXCursor_ClassTemplate: 31,
        CXCursor_ClassTemplatePartialSpecialization: 32,
        CXCursor_NamespaceAlias: 33,
        CXCursor_UsingDirective: 34,
        CXCursor_UsingDeclaration: 35,
        CXCursor_TypeAliasDecl: 36,
        CXCursor_ObjCSynthesizeDecl: 37,
        CXCursor_ObjCDynamicDecl: 38,
        CXCursor_CXXAccessSpecifier: 39,
        CXCursor_FirstDecl: 1,
        CXCursor_LastDecl: 39,
        CXCursor_FirstRef: 40,
        CXCursor_ObjCSuperClassRef: 40,
        CXCursor_ObjCProtocolRef: 41,
        CXCursor_ObjCClassRef: 42,
        CXCursor_TypeRef: 43,
        CXCursor_CXXBaseSpecifier: 44,
        CXCursor_TemplateRef: 45,
        CXCursor_NamespaceRef: 46,
        CXCursor_MemberRef: 47,
        CXCursor_LabelRef: 48,
        CXCursor_OverloadedDeclRef: 49,
        CXCursor_VariableRef: 50,
        CXCursor_LastRef: 50,
        CXCursor_FirstInvalid: 70,
        CXCursor_InvalidFile: 70,
        CXCursor_NoDeclFound: 71,
        CXCursor_NotImplemented: 72,
        CXCursor_InvalidCode: 73,
        CXCursor_LastInvalid: 73,
        CXCursor_FirstExpr: 100,
        CXCursor_UnexposedExpr: 100,
        CXCursor_DeclRefExpr: 101,
        CXCursor_MemberRefExpr: 102,
        CXCursor_CallExpr: 103,
        CXCursor_ObjCMessageExpr: 104,
        CXCursor_BlockExpr: 105,
        CXCursor_IntegerLiteral: 106,
        CXCursor_FloatingLiteral: 107,
        CXCursor_ImaginaryLiteral: 108,
        CXCursor_StringLiteral: 109,
        CXCursor_CharacterLiteral: 110,
        CXCursor_ParenExpr: 111,
        CXCursor_UnaryOperator: 112,
        CXCursor_ArraySubscriptExpr: 113,
        CXCursor_BinaryOperator: 114,
        CXCursor_CompoundAssignOperator: 115,
        CXCursor_ConditionalOperator: 116,
        CXCursor_CStyleCastExpr: 117,
        CXCursor_CompoundLiteralExpr: 118,
        CXCursor_InitListExpr: 119,
        CXCursor_AddrLabelExpr: 120,
        CXCursor_StmtExpr: 121,
        CXCursor_GenericSelectionExpr: 122,
        CXCursor_GNUNullExpr: 123,
        CXCursor_CXXStaticCastExpr: 124,
        CXCursor_CXXDynamicCastExpr: 125,
        CXCursor_CXXReinterpretCastExpr: 126,
        CXCursor_CXXConstCastExpr: 127,
        CXCursor_CXXFunctionalCastExpr: 128,
        CXCursor_CXXTypeidExpr: 129,
        CXCursor_CXXBoolLiteralExpr: 130,
        CXCursor_CXXNullPtrLiteralExpr: 131,
        CXCursor_CXXThisExpr: 132,
        CXCursor_CXXThrowExpr: 133,
        CXCursor_CXXNewExpr: 134,
        CXCursor_CXXDeleteExpr: 135,
        CXCursor_UnaryExpr: 136,
        CXCursor_ObjCStringLiteral: 137,
        CXCursor_ObjCEncodeExpr: 138,
        CXCursor_ObjCSelectorExpr: 139,
        CXCursor_ObjCProtocolExpr: 140,
        CXCursor_ObjCBridgedCastExpr: 141,
        CXCursor_PackExpansionExpr: 142,
        CXCursor_SizeOfPackExpr: 143,
        CXCursor_LambdaExpr: 144,
        CXCursor_ObjCBoolLiteralExpr: 145,
        CXCursor_ObjCSelfExpr: 146,
        CXCursor_OMPArraySectionExpr: 147,
        CXCursor_ObjCAvailabilityCheckExpr: 148,
        CXCursor_FixedPointLiteral: 149,
        CXCursor_LastExpr: 149,
        CXCursor_FirstStmt: 200,
        CXCursor_UnexposedStmt: 200,
        CXCursor_LabelStmt: 201,
        CXCursor_CompoundStmt: 202,
        CXCursor_CaseStmt: 203,
        CXCursor_DefaultStmt: 204,
        CXCursor_IfStmt: 205,
        CXCursor_SwitchStmt: 206,
        CXCursor_WhileStmt: 207,
        CXCursor_DoStmt: 208,
        CXCursor_ForStmt: 209,
        CXCursor_GotoStmt: 210,
        CXCursor_IndirectGotoStmt: 211,
        CXCursor_ContinueStmt: 212,
        CXCursor_BreakStmt: 213,
        CXCursor_ReturnStmt: 214,
        CXCursor_GCCAsmStmt: 215,
        CXCursor_AsmStmt: 215,
        CXCursor_ObjCAtTryStmt: 216,
        CXCursor_ObjCAtCatchStmt: 217,
        CXCursor_ObjCAtFinallyStmt: 218,
        CXCursor_ObjCAtThrowStmt: 219,
        CXCursor_ObjCAtSynchronizedStmt: 220,
        CXCursor_ObjCAutoreleasePoolStmt: 221,
        CXCursor_ObjCForCollectionStmt: 222,
        CXCursor_CXXCatchStmt: 223,
        CXCursor_CXXTryStmt: 224,
        CXCursor_CXXForRangeStmt: 225,
        CXCursor_SEHTryStmt: 226,
        CXCursor_SEHExceptStmt: 227,
        CXCursor_SEHFinallyStmt: 228,
        CXCursor_MSAsmStmt: 229,
        CXCursor_NullStmt: 230,
        CXCursor_DeclStmt: 231,
        CXCursor_OMPParallelDirective: 232,
        CXCursor_OMPSimdDirective: 233,
        CXCursor_OMPForDirective: 234,
        CXCursor_OMPSectionsDirective: 235,
        CXCursor_OMPSectionDirective: 236,
        CXCursor_OMPSingleDirective: 237,
        CXCursor_OMPParallelForDirective: 238,
        CXCursor_OMPParallelSectionsDirective: 239,
        CXCursor_OMPTaskDirective: 240,
        CXCursor_OMPMasterDirective: 241,
        CXCursor_OMPCriticalDirective: 242,
        CXCursor_OMPTaskyieldDirective: 243,
        CXCursor_OMPBarrierDirective: 244,
        CXCursor_OMPTaskwaitDirective: 245,
        CXCursor_OMPFlushDirective: 246,
        CXCursor_SEHLeaveStmt: 247,
        CXCursor_OMPOrderedDirective: 248,
        CXCursor_OMPAtomicDirective: 249,
        CXCursor_OMPForSimdDirective: 250,
        CXCursor_OMPParallelForSimdDirective: 251,
        CXCursor_OMPTargetDirective: 252,
        CXCursor_OMPTeamsDirective: 253,
        CXCursor_OMPTaskgroupDirective: 254,
        CXCursor_OMPCancellationPointDirective: 255,
        CXCursor_OMPCancelDirective: 256,
        CXCursor_OMPTargetDataDirective: 257,
        CXCursor_OMPTaskLoopDirective: 258,
        CXCursor_OMPTaskLoopSimdDirective: 259,
        CXCursor_OMPDistributeDirective: 260,
        CXCursor_OMPTargetEnterDataDirective: 261,
        CXCursor_OMPTargetExitDataDirective: 262,
        CXCursor_OMPTargetParallelDirective: 263,
        CXCursor_OMPTargetParallelForDirective: 264,
        CXCursor_OMPTargetUpdateDirective: 265,
        CXCursor_OMPDistributeParallelForDirective: 266,
        CXCursor_OMPDistributeParallelForSimdDirective: 267,
        CXCursor_OMPDistributeSimdDirective: 268,
        CXCursor_OMPTargetParallelForSimdDirective: 269,
        CXCursor_OMPTargetSimdDirective: 270,
        CXCursor_OMPTeamsDistributeDirective: 271,
        CXCursor_OMPTeamsDistributeSimdDirective: 272,
        CXCursor_OMPTeamsDistributeParallelForSimdDirective: 273,
        CXCursor_OMPTeamsDistributeParallelForDirective: 274,
        CXCursor_OMPTargetTeamsDirective: 275,
        CXCursor_OMPTargetTeamsDistributeDirective: 276,
        CXCursor_OMPTargetTeamsDistributeParallelForDirective: 277,
        CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective: 278,
        CXCursor_OMPTargetTeamsDistributeSimdDirective: 279,
        CXCursor_BuiltinBitCastExpr: 280,
        CXCursor_LastStmt: 280,
        CXCursor_TranslationUnit: 300,
        CXCursor_FirstAttr: 400,
        CXCursor_UnexposedAttr: 400,
        CXCursor_IBActionAttr: 401,
        CXCursor_IBOutletAttr: 402,
        CXCursor_IBOutletCollectionAttr: 403,
        CXCursor_CXXFinalAttr: 404,
        CXCursor_CXXOverrideAttr: 405,
        CXCursor_AnnotateAttr: 406,
        CXCursor_AsmLabelAttr: 407,
        CXCursor_PackedAttr: 408,
        CXCursor_PureAttr: 409,
        CXCursor_ConstAttr: 410,
        CXCursor_NoDuplicateAttr: 411,
        CXCursor_CUDAConstantAttr: 412,
        CXCursor_CUDADeviceAttr: 413,
        CXCursor_CUDAGlobalAttr: 414,
        CXCursor_CUDAHostAttr: 415,
        CXCursor_CUDASharedAttr: 416,
        CXCursor_VisibilityAttr: 417,
        CXCursor_DLLExport: 418,
        CXCursor_DLLImport: 419,
        CXCursor_NSReturnsRetained: 420,
        CXCursor_NSReturnsNotRetained: 421,
        CXCursor_NSReturnsAutoreleased: 422,
        CXCursor_NSConsumesSelf: 423,
        CXCursor_NSConsumed: 424,
        CXCursor_ObjCException: 425,
        CXCursor_ObjCNSObject: 426,
        CXCursor_ObjCIndependentClass: 427,
        CXCursor_ObjCPreciseLifetime: 428,
        CXCursor_ObjCReturnsInnerPointer: 429,
        CXCursor_ObjCRequiresSuper: 430,
        CXCursor_ObjCRootClass: 431,
        CXCursor_ObjCSubclassingRestricted: 432,
        CXCursor_ObjCExplicitProtocolImpl: 433,
        CXCursor_ObjCDesignatedInitializer: 434,
        CXCursor_ObjCRuntimeVisible: 435,
        CXCursor_ObjCBoxable: 436,
        CXCursor_FlagEnum: 437,
        CXCursor_ConvergentAttr: 438,
        CXCursor_WarnUnusedAttr: 439,
        CXCursor_WarnUnusedResultAttr: 440,
        CXCursor_AlignedAttr: 441,
        CXCursor_LastAttr: 441,
        CXCursor_PreprocessingDirective: 500,
        CXCursor_MacroDefinition: 501,
        CXCursor_MacroExpansion: 502,
        CXCursor_MacroInstantiation: 502,
        CXCursor_InclusionDirective: 503,
        CXCursor_FirstPreprocessing: 500,
        CXCursor_LastPreprocessing: 503,
        CXCursor_ModuleImportDecl: 600,
        CXCursor_TypeAliasTemplateDecl: 601,
        CXCursor_StaticAssert: 602,
        CXCursor_FriendDecl: 603,
        CXCursor_FirstExtraDecl: 600,
        CXCursor_LastExtraDecl: 603,
        CXCursor_OverloadCandidate: 700,
        '1': 'CXCursor_UnexposedDecl',
        '2': 'CXCursor_StructDecl',
        '3': 'CXCursor_UnionDecl',
        '4': 'CXCursor_ClassDecl',
        '5': 'CXCursor_EnumDecl',
        '6': 'CXCursor_FieldDecl',
        '7': 'CXCursor_EnumConstantDecl',
        '8': 'CXCursor_FunctionDecl',
        '9': 'CXCursor_VarDecl',
        '10': 'CXCursor_ParmDecl',
        '11': 'CXCursor_ObjCInterfaceDecl',
        '12': 'CXCursor_ObjCCategoryDecl',
        '13': 'CXCursor_ObjCProtocolDecl',
        '14': 'CXCursor_ObjCPropertyDecl',
        '15': 'CXCursor_ObjCIvarDecl',
        '16': 'CXCursor_ObjCInstanceMethodDecl',
        '17': 'CXCursor_ObjCClassMethodDecl',
        '18': 'CXCursor_ObjCImplementationDecl',
        '19': 'CXCursor_ObjCCategoryImplDecl',
        '20': 'CXCursor_TypedefDecl',
        '21': 'CXCursor_CXXMethod',
        '22': 'CXCursor_Namespace',
        '23': 'CXCursor_LinkageSpec',
        '24': 'CXCursor_Constructor',
        '25': 'CXCursor_Destructor',
        '26': 'CXCursor_ConversionFunction',
        '27': 'CXCursor_TemplateTypeParameter',
        '28': 'CXCursor_NonTypeTemplateParameter',
        '29': 'CXCursor_TemplateTemplateParameter',
        '30': 'CXCursor_FunctionTemplate',
        '31': 'CXCursor_ClassTemplate',
        '32': 'CXCursor_ClassTemplatePartialSpecialization',
        '33': 'CXCursor_NamespaceAlias',
        '34': 'CXCursor_UsingDirective',
        '35': 'CXCursor_UsingDeclaration',
        '36': 'CXCursor_TypeAliasDecl',
        '37': 'CXCursor_ObjCSynthesizeDecl',
        '38': 'CXCursor_ObjCDynamicDecl',
        '39': 'CXCursor_CXXAccessSpecifier',
        '1': 'CXCursor_FirstDecl',
        '39': 'CXCursor_LastDecl',
        '40': 'CXCursor_FirstRef',
        '40': 'CXCursor_ObjCSuperClassRef',
        '41': 'CXCursor_ObjCProtocolRef',
        '42': 'CXCursor_ObjCClassRef',
        '43': 'CXCursor_TypeRef',
        '44': 'CXCursor_CXXBaseSpecifier',
        '45': 'CXCursor_TemplateRef',
        '46': 'CXCursor_NamespaceRef',
        '47': 'CXCursor_MemberRef',
        '48': 'CXCursor_LabelRef',
        '49': 'CXCursor_OverloadedDeclRef',
        '50': 'CXCursor_VariableRef',
        '50': 'CXCursor_LastRef',
        '70': 'CXCursor_FirstInvalid',
        '70': 'CXCursor_InvalidFile',
        '71': 'CXCursor_NoDeclFound',
        '72': 'CXCursor_NotImplemented',
        '73': 'CXCursor_InvalidCode',
        '73': 'CXCursor_LastInvalid',
        '100': 'CXCursor_FirstExpr',
        '100': 'CXCursor_UnexposedExpr',
        '101': 'CXCursor_DeclRefExpr',
        '102': 'CXCursor_MemberRefExpr',
        '103': 'CXCursor_CallExpr',
        '104': 'CXCursor_ObjCMessageExpr',
        '105': 'CXCursor_BlockExpr',
        '106': 'CXCursor_IntegerLiteral',
        '107': 'CXCursor_FloatingLiteral',
        '108': 'CXCursor_ImaginaryLiteral',
        '109': 'CXCursor_StringLiteral',
        '110': 'CXCursor_CharacterLiteral',
        '111': 'CXCursor_ParenExpr',
        '112': 'CXCursor_UnaryOperator',
        '113': 'CXCursor_ArraySubscriptExpr',
        '114': 'CXCursor_BinaryOperator',
        '115': 'CXCursor_CompoundAssignOperator',
        '116': 'CXCursor_ConditionalOperator',
        '117': 'CXCursor_CStyleCastExpr',
        '118': 'CXCursor_CompoundLiteralExpr',
        '119': 'CXCursor_InitListExpr',
        '120': 'CXCursor_AddrLabelExpr',
        '121': 'CXCursor_StmtExpr',
        '122': 'CXCursor_GenericSelectionExpr',
        '123': 'CXCursor_GNUNullExpr',
        '124': 'CXCursor_CXXStaticCastExpr',
        '125': 'CXCursor_CXXDynamicCastExpr',
        '126': 'CXCursor_CXXReinterpretCastExpr',
        '127': 'CXCursor_CXXConstCastExpr',
        '128': 'CXCursor_CXXFunctionalCastExpr',
        '129': 'CXCursor_CXXTypeidExpr',
        '130': 'CXCursor_CXXBoolLiteralExpr',
        '131': 'CXCursor_CXXNullPtrLiteralExpr',
        '132': 'CXCursor_CXXThisExpr',
        '133': 'CXCursor_CXXThrowExpr',
        '134': 'CXCursor_CXXNewExpr',
        '135': 'CXCursor_CXXDeleteExpr',
        '136': 'CXCursor_UnaryExpr',
        '137': 'CXCursor_ObjCStringLiteral',
        '138': 'CXCursor_ObjCEncodeExpr',
        '139': 'CXCursor_ObjCSelectorExpr',
        '140': 'CXCursor_ObjCProtocolExpr',
        '141': 'CXCursor_ObjCBridgedCastExpr',
        '142': 'CXCursor_PackExpansionExpr',
        '143': 'CXCursor_SizeOfPackExpr',
        '144': 'CXCursor_LambdaExpr',
        '145': 'CXCursor_ObjCBoolLiteralExpr',
        '146': 'CXCursor_ObjCSelfExpr',
        '147': 'CXCursor_OMPArraySectionExpr',
        '148': 'CXCursor_ObjCAvailabilityCheckExpr',
        '149': 'CXCursor_FixedPointLiteral',
        '149': 'CXCursor_LastExpr',
        '200': 'CXCursor_FirstStmt',
        '200': 'CXCursor_UnexposedStmt',
        '201': 'CXCursor_LabelStmt',
        '202': 'CXCursor_CompoundStmt',
        '203': 'CXCursor_CaseStmt',
        '204': 'CXCursor_DefaultStmt',
        '205': 'CXCursor_IfStmt',
        '206': 'CXCursor_SwitchStmt',
        '207': 'CXCursor_WhileStmt',
        '208': 'CXCursor_DoStmt',
        '209': 'CXCursor_ForStmt',
        '210': 'CXCursor_GotoStmt',
        '211': 'CXCursor_IndirectGotoStmt',
        '212': 'CXCursor_ContinueStmt',
        '213': 'CXCursor_BreakStmt',
        '214': 'CXCursor_ReturnStmt',
        '215': 'CXCursor_GCCAsmStmt',
        '215': 'CXCursor_AsmStmt',
        '216': 'CXCursor_ObjCAtTryStmt',
        '217': 'CXCursor_ObjCAtCatchStmt',
        '218': 'CXCursor_ObjCAtFinallyStmt',
        '219': 'CXCursor_ObjCAtThrowStmt',
        '220': 'CXCursor_ObjCAtSynchronizedStmt',
        '221': 'CXCursor_ObjCAutoreleasePoolStmt',
        '222': 'CXCursor_ObjCForCollectionStmt',
        '223': 'CXCursor_CXXCatchStmt',
        '224': 'CXCursor_CXXTryStmt',
        '225': 'CXCursor_CXXForRangeStmt',
        '226': 'CXCursor_SEHTryStmt',
        '227': 'CXCursor_SEHExceptStmt',
        '228': 'CXCursor_SEHFinallyStmt',
        '229': 'CXCursor_MSAsmStmt',
        '230': 'CXCursor_NullStmt',
        '231': 'CXCursor_DeclStmt',
        '232': 'CXCursor_OMPParallelDirective',
        '233': 'CXCursor_OMPSimdDirective',
        '234': 'CXCursor_OMPForDirective',
        '235': 'CXCursor_OMPSectionsDirective',
        '236': 'CXCursor_OMPSectionDirective',
        '237': 'CXCursor_OMPSingleDirective',
        '238': 'CXCursor_OMPParallelForDirective',
        '239': 'CXCursor_OMPParallelSectionsDirective',
        '240': 'CXCursor_OMPTaskDirective',
        '241': 'CXCursor_OMPMasterDirective',
        '242': 'CXCursor_OMPCriticalDirective',
        '243': 'CXCursor_OMPTaskyieldDirective',
        '244': 'CXCursor_OMPBarrierDirective',
        '245': 'CXCursor_OMPTaskwaitDirective',
        '246': 'CXCursor_OMPFlushDirective',
        '247': 'CXCursor_SEHLeaveStmt',
        '248': 'CXCursor_OMPOrderedDirective',
        '249': 'CXCursor_OMPAtomicDirective',
        '250': 'CXCursor_OMPForSimdDirective',
        '251': 'CXCursor_OMPParallelForSimdDirective',
        '252': 'CXCursor_OMPTargetDirective',
        '253': 'CXCursor_OMPTeamsDirective',
        '254': 'CXCursor_OMPTaskgroupDirective',
        '255': 'CXCursor_OMPCancellationPointDirective',
        '256': 'CXCursor_OMPCancelDirective',
        '257': 'CXCursor_OMPTargetDataDirective',
        '258': 'CXCursor_OMPTaskLoopDirective',
        '259': 'CXCursor_OMPTaskLoopSimdDirective',
        '260': 'CXCursor_OMPDistributeDirective',
        '261': 'CXCursor_OMPTargetEnterDataDirective',
        '262': 'CXCursor_OMPTargetExitDataDirective',
        '263': 'CXCursor_OMPTargetParallelDirective',
        '264': 'CXCursor_OMPTargetParallelForDirective',
        '265': 'CXCursor_OMPTargetUpdateDirective',
        '266': 'CXCursor_OMPDistributeParallelForDirective',
        '267': 'CXCursor_OMPDistributeParallelForSimdDirective',
        '268': 'CXCursor_OMPDistributeSimdDirective',
        '269': 'CXCursor_OMPTargetParallelForSimdDirective',
        '270': 'CXCursor_OMPTargetSimdDirective',
        '271': 'CXCursor_OMPTeamsDistributeDirective',
        '272': 'CXCursor_OMPTeamsDistributeSimdDirective',
        '273': 'CXCursor_OMPTeamsDistributeParallelForSimdDirective',
        '274': 'CXCursor_OMPTeamsDistributeParallelForDirective',
        '275': 'CXCursor_OMPTargetTeamsDirective',
        '276': 'CXCursor_OMPTargetTeamsDistributeDirective',
        '277': 'CXCursor_OMPTargetTeamsDistributeParallelForDirective',
        '278': 'CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective',
        '279': 'CXCursor_OMPTargetTeamsDistributeSimdDirective',
        '280': 'CXCursor_BuiltinBitCastExpr',
        '280': 'CXCursor_LastStmt',
        '300': 'CXCursor_TranslationUnit',
        '400': 'CXCursor_FirstAttr',
        '400': 'CXCursor_UnexposedAttr',
        '401': 'CXCursor_IBActionAttr',
        '402': 'CXCursor_IBOutletAttr',
        '403': 'CXCursor_IBOutletCollectionAttr',
        '404': 'CXCursor_CXXFinalAttr',
        '405': 'CXCursor_CXXOverrideAttr',
        '406': 'CXCursor_AnnotateAttr',
        '407': 'CXCursor_AsmLabelAttr',
        '408': 'CXCursor_PackedAttr',
        '409': 'CXCursor_PureAttr',
        '410': 'CXCursor_ConstAttr',
        '411': 'CXCursor_NoDuplicateAttr',
        '412': 'CXCursor_CUDAConstantAttr',
        '413': 'CXCursor_CUDADeviceAttr',
        '414': 'CXCursor_CUDAGlobalAttr',
        '415': 'CXCursor_CUDAHostAttr',
        '416': 'CXCursor_CUDASharedAttr',
        '417': 'CXCursor_VisibilityAttr',
        '418': 'CXCursor_DLLExport',
        '419': 'CXCursor_DLLImport',
        '420': 'CXCursor_NSReturnsRetained',
        '421': 'CXCursor_NSReturnsNotRetained',
        '422': 'CXCursor_NSReturnsAutoreleased',
        '423': 'CXCursor_NSConsumesSelf',
        '424': 'CXCursor_NSConsumed',
        '425': 'CXCursor_ObjCException',
        '426': 'CXCursor_ObjCNSObject',
        '427': 'CXCursor_ObjCIndependentClass',
        '428': 'CXCursor_ObjCPreciseLifetime',
        '429': 'CXCursor_ObjCReturnsInnerPointer',
        '430': 'CXCursor_ObjCRequiresSuper',
        '431': 'CXCursor_ObjCRootClass',
        '432': 'CXCursor_ObjCSubclassingRestricted',
        '433': 'CXCursor_ObjCExplicitProtocolImpl',
        '434': 'CXCursor_ObjCDesignatedInitializer',
        '435': 'CXCursor_ObjCRuntimeVisible',
        '436': 'CXCursor_ObjCBoxable',
        '437': 'CXCursor_FlagEnum',
        '438': 'CXCursor_ConvergentAttr',
        '439': 'CXCursor_WarnUnusedAttr',
        '440': 'CXCursor_WarnUnusedResultAttr',
        '441': 'CXCursor_AlignedAttr',
        '441': 'CXCursor_LastAttr',
        '500': 'CXCursor_PreprocessingDirective',
        '501': 'CXCursor_MacroDefinition',
        '502': 'CXCursor_MacroExpansion',
        '502': 'CXCursor_MacroInstantiation',
        '503': 'CXCursor_InclusionDirective',
        '500': 'CXCursor_FirstPreprocessing',
        '503': 'CXCursor_LastPreprocessing',
        '600': 'CXCursor_ModuleImportDecl',
        '601': 'CXCursor_TypeAliasTemplateDecl',
        '602': 'CXCursor_StaticAssert',
        '603': 'CXCursor_FriendDecl',
        '600': 'CXCursor_FirstExtraDecl',
        '603': 'CXCursor_LastExtraDecl',
        '700': 'CXCursor_OverloadCandidate',
    },
    'CXLinkageKind': {
        CXLinkage_Invalid: 0,
        CXLinkage_NoLinkage: 1,
        CXLinkage_Internal: 2,
        CXLinkage_UniqueExternal: 3,
        CXLinkage_External: 4,
        '0': 'CXLinkage_Invalid',
        '1': 'CXLinkage_NoLinkage',
        '2': 'CXLinkage_Internal',
        '3': 'CXLinkage_UniqueExternal',
        '4': 'CXLinkage_External',
    },
    'CXVisibilityKind': {
        CXVisibility_Invalid: 0,
        CXVisibility_Hidden: 1,
        CXVisibility_Protected: 2,
        CXVisibility_Default: 3,
        '0': 'CXVisibility_Invalid',
        '1': 'CXVisibility_Hidden',
        '2': 'CXVisibility_Protected',
        '3': 'CXVisibility_Default',
    },
    'CXAvailabilityKind': {
        CXAvailability_Available: 0,
        CXAvailability_Deprecated: 1,
        CXAvailability_NotAvailable: 2,
        CXAvailability_NotAccessible: 3,
        '0': 'CXAvailability_Available',
        '1': 'CXAvailability_Deprecated',
        '2': 'CXAvailability_NotAvailable',
        '3': 'CXAvailability_NotAccessible',
    },
    'CXLanguageKind': {
        CXLanguage_Invalid: 0,
        CXLanguage_C: 1,
        CXLanguage_ObjC: 2,
        CXLanguage_CPlusPlus: 3,
        '0': 'CXLanguage_Invalid',
        '1': 'CXLanguage_C',
        '2': 'CXLanguage_ObjC',
        '3': 'CXLanguage_CPlusPlus',
    },
    'CXTLSKind': {
        CXTLS_None: 0,
        CXTLS_Dynamic: 1,
        CXTLS_Static: 2,
        '0': 'CXTLS_None',
        '1': 'CXTLS_Dynamic',
        '2': 'CXTLS_Static',
    },
    'CXTypeKind': {
        CXType_Invalid: 0,
        CXType_Unexposed: 1,
        CXType_Void: 2,
        CXType_Bool: 3,
        CXType_Char_U: 4,
        CXType_UChar: 5,
        CXType_Char16: 6,
        CXType_Char32: 7,
        CXType_UShort: 8,
        CXType_UInt: 9,
        CXType_ULong: 10,
        CXType_ULongLong: 11,
        CXType_UInt128: 12,
        CXType_Char_S: 13,
        CXType_SChar: 14,
        CXType_WChar: 15,
        CXType_Short: 16,
        CXType_Int: 17,
        CXType_Long: 18,
        CXType_LongLong: 19,
        CXType_Int128: 20,
        CXType_Float: 21,
        CXType_Double: 22,
        CXType_LongDouble: 23,
        CXType_NullPtr: 24,
        CXType_Overload: 25,
        CXType_Dependent: 26,
        CXType_ObjCId: 27,
        CXType_ObjCClass: 28,
        CXType_ObjCSel: 29,
        CXType_Float128: 30,
        CXType_Half: 31,
        CXType_Float16: 32,
        CXType_ShortAccum: 33,
        CXType_Accum: 34,
        CXType_LongAccum: 35,
        CXType_UShortAccum: 36,
        CXType_UAccum: 37,
        CXType_ULongAccum: 38,
        CXType_FirstBuiltin: 2,
        CXType_LastBuiltin: 38,
        CXType_Complex: 100,
        CXType_Pointer: 101,
        CXType_BlockPointer: 102,
        CXType_LValueReference: 103,
        CXType_RValueReference: 104,
        CXType_Record: 105,
        CXType_Enum: 106,
        CXType_Typedef: 107,
        CXType_ObjCInterface: 108,
        CXType_ObjCObjectPointer: 109,
        CXType_FunctionNoProto: 110,
        CXType_FunctionProto: 111,
        CXType_ConstantArray: 112,
        CXType_Vector: 113,
        CXType_IncompleteArray: 114,
        CXType_VariableArray: 115,
        CXType_DependentSizedArray: 116,
        CXType_MemberPointer: 117,
        CXType_Auto: 118,
        CXType_Elaborated: 119,
        CXType_Pipe: 120,
        CXType_OCLImage1dRO: 121,
        CXType_OCLImage1dArrayRO: 122,
        CXType_OCLImage1dBufferRO: 123,
        CXType_OCLImage2dRO: 124,
        CXType_OCLImage2dArrayRO: 125,
        CXType_OCLImage2dDepthRO: 126,
        CXType_OCLImage2dArrayDepthRO: 127,
        CXType_OCLImage2dMSAARO: 128,
        CXType_OCLImage2dArrayMSAARO: 129,
        CXType_OCLImage2dMSAADepthRO: 130,
        CXType_OCLImage2dArrayMSAADepthRO: 131,
        CXType_OCLImage3dRO: 132,
        CXType_OCLImage1dWO: 133,
        CXType_OCLImage1dArrayWO: 134,
        CXType_OCLImage1dBufferWO: 135,
        CXType_OCLImage2dWO: 136,
        CXType_OCLImage2dArrayWO: 137,
        CXType_OCLImage2dDepthWO: 138,
        CXType_OCLImage2dArrayDepthWO: 139,
        CXType_OCLImage2dMSAAWO: 140,
        CXType_OCLImage2dArrayMSAAWO: 141,
        CXType_OCLImage2dMSAADepthWO: 142,
        CXType_OCLImage2dArrayMSAADepthWO: 143,
        CXType_OCLImage3dWO: 144,
        CXType_OCLImage1dRW: 145,
        CXType_OCLImage1dArrayRW: 146,
        CXType_OCLImage1dBufferRW: 147,
        CXType_OCLImage2dRW: 148,
        CXType_OCLImage2dArrayRW: 149,
        CXType_OCLImage2dDepthRW: 150,
        CXType_OCLImage2dArrayDepthRW: 151,
        CXType_OCLImage2dMSAARW: 152,
        CXType_OCLImage2dArrayMSAARW: 153,
        CXType_OCLImage2dMSAADepthRW: 154,
        CXType_OCLImage2dArrayMSAADepthRW: 155,
        CXType_OCLImage3dRW: 156,
        CXType_OCLSampler: 157,
        CXType_OCLEvent: 158,
        CXType_OCLQueue: 159,
        CXType_OCLReserveID: 160,
        CXType_ObjCObject: 161,
        CXType_ObjCTypeParam: 162,
        CXType_Attributed: 163,
        CXType_OCLIntelSubgroupAVCMcePayload: 164,
        CXType_OCLIntelSubgroupAVCImePayload: 165,
        CXType_OCLIntelSubgroupAVCRefPayload: 166,
        CXType_OCLIntelSubgroupAVCSicPayload: 167,
        CXType_OCLIntelSubgroupAVCMceResult: 168,
        CXType_OCLIntelSubgroupAVCImeResult: 169,
        CXType_OCLIntelSubgroupAVCRefResult: 170,
        CXType_OCLIntelSubgroupAVCSicResult: 171,
        CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout: 172,
        CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout: 173,
        CXType_OCLIntelSubgroupAVCImeSingleRefStreamin: 174,
        CXType_OCLIntelSubgroupAVCImeDualRefStreamin: 175,
        CXType_ExtVector: 176,
        '0': 'CXType_Invalid',
        '1': 'CXType_Unexposed',
        '2': 'CXType_Void',
        '3': 'CXType_Bool',
        '4': 'CXType_Char_U',
        '5': 'CXType_UChar',
        '6': 'CXType_Char16',
        '7': 'CXType_Char32',
        '8': 'CXType_UShort',
        '9': 'CXType_UInt',
        '10': 'CXType_ULong',
        '11': 'CXType_ULongLong',
        '12': 'CXType_UInt128',
        '13': 'CXType_Char_S',
        '14': 'CXType_SChar',
        '15': 'CXType_WChar',
        '16': 'CXType_Short',
        '17': 'CXType_Int',
        '18': 'CXType_Long',
        '19': 'CXType_LongLong',
        '20': 'CXType_Int128',
        '21': 'CXType_Float',
        '22': 'CXType_Double',
        '23': 'CXType_LongDouble',
        '24': 'CXType_NullPtr',
        '25': 'CXType_Overload',
        '26': 'CXType_Dependent',
        '27': 'CXType_ObjCId',
        '28': 'CXType_ObjCClass',
        '29': 'CXType_ObjCSel',
        '30': 'CXType_Float128',
        '31': 'CXType_Half',
        '32': 'CXType_Float16',
        '33': 'CXType_ShortAccum',
        '34': 'CXType_Accum',
        '35': 'CXType_LongAccum',
        '36': 'CXType_UShortAccum',
        '37': 'CXType_UAccum',
        '38': 'CXType_ULongAccum',
        '2': 'CXType_FirstBuiltin',
        '38': 'CXType_LastBuiltin',
        '100': 'CXType_Complex',
        '101': 'CXType_Pointer',
        '102': 'CXType_BlockPointer',
        '103': 'CXType_LValueReference',
        '104': 'CXType_RValueReference',
        '105': 'CXType_Record',
        '106': 'CXType_Enum',
        '107': 'CXType_Typedef',
        '108': 'CXType_ObjCInterface',
        '109': 'CXType_ObjCObjectPointer',
        '110': 'CXType_FunctionNoProto',
        '111': 'CXType_FunctionProto',
        '112': 'CXType_ConstantArray',
        '113': 'CXType_Vector',
        '114': 'CXType_IncompleteArray',
        '115': 'CXType_VariableArray',
        '116': 'CXType_DependentSizedArray',
        '117': 'CXType_MemberPointer',
        '118': 'CXType_Auto',
        '119': 'CXType_Elaborated',
        '120': 'CXType_Pipe',
        '121': 'CXType_OCLImage1dRO',
        '122': 'CXType_OCLImage1dArrayRO',
        '123': 'CXType_OCLImage1dBufferRO',
        '124': 'CXType_OCLImage2dRO',
        '125': 'CXType_OCLImage2dArrayRO',
        '126': 'CXType_OCLImage2dDepthRO',
        '127': 'CXType_OCLImage2dArrayDepthRO',
        '128': 'CXType_OCLImage2dMSAARO',
        '129': 'CXType_OCLImage2dArrayMSAARO',
        '130': 'CXType_OCLImage2dMSAADepthRO',
        '131': 'CXType_OCLImage2dArrayMSAADepthRO',
        '132': 'CXType_OCLImage3dRO',
        '133': 'CXType_OCLImage1dWO',
        '134': 'CXType_OCLImage1dArrayWO',
        '135': 'CXType_OCLImage1dBufferWO',
        '136': 'CXType_OCLImage2dWO',
        '137': 'CXType_OCLImage2dArrayWO',
        '138': 'CXType_OCLImage2dDepthWO',
        '139': 'CXType_OCLImage2dArrayDepthWO',
        '140': 'CXType_OCLImage2dMSAAWO',
        '141': 'CXType_OCLImage2dArrayMSAAWO',
        '142': 'CXType_OCLImage2dMSAADepthWO',
        '143': 'CXType_OCLImage2dArrayMSAADepthWO',
        '144': 'CXType_OCLImage3dWO',
        '145': 'CXType_OCLImage1dRW',
        '146': 'CXType_OCLImage1dArrayRW',
        '147': 'CXType_OCLImage1dBufferRW',
        '148': 'CXType_OCLImage2dRW',
        '149': 'CXType_OCLImage2dArrayRW',
        '150': 'CXType_OCLImage2dDepthRW',
        '151': 'CXType_OCLImage2dArrayDepthRW',
        '152': 'CXType_OCLImage2dMSAARW',
        '153': 'CXType_OCLImage2dArrayMSAARW',
        '154': 'CXType_OCLImage2dMSAADepthRW',
        '155': 'CXType_OCLImage2dArrayMSAADepthRW',
        '156': 'CXType_OCLImage3dRW',
        '157': 'CXType_OCLSampler',
        '158': 'CXType_OCLEvent',
        '159': 'CXType_OCLQueue',
        '160': 'CXType_OCLReserveID',
        '161': 'CXType_ObjCObject',
        '162': 'CXType_ObjCTypeParam',
        '163': 'CXType_Attributed',
        '164': 'CXType_OCLIntelSubgroupAVCMcePayload',
        '165': 'CXType_OCLIntelSubgroupAVCImePayload',
        '166': 'CXType_OCLIntelSubgroupAVCRefPayload',
        '167': 'CXType_OCLIntelSubgroupAVCSicPayload',
        '168': 'CXType_OCLIntelSubgroupAVCMceResult',
        '169': 'CXType_OCLIntelSubgroupAVCImeResult',
        '170': 'CXType_OCLIntelSubgroupAVCRefResult',
        '171': 'CXType_OCLIntelSubgroupAVCSicResult',
        '172': 'CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout',
        '173': 'CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout',
        '174': 'CXType_OCLIntelSubgroupAVCImeSingleRefStreamin',
        '175': 'CXType_OCLIntelSubgroupAVCImeDualRefStreamin',
        '176': 'CXType_ExtVector',
    },
    'CXTemplateArgumentKind': {
        CXTemplateArgumentKind_Null: 0,
        CXTemplateArgumentKind_Type: 1,
        CXTemplateArgumentKind_Declaration: 2,
        CXTemplateArgumentKind_NullPtr: 3,
        CXTemplateArgumentKind_Integral: 4,
        CXTemplateArgumentKind_Template: 5,
        CXTemplateArgumentKind_TemplateExpansion: 6,
        CXTemplateArgumentKind_Expression: 7,
        CXTemplateArgumentKind_Pack: 8,
        CXTemplateArgumentKind_Invalid: 9,
        '0': 'CXTemplateArgumentKind_Null',
        '1': 'CXTemplateArgumentKind_Type',
        '2': 'CXTemplateArgumentKind_Declaration',
        '3': 'CXTemplateArgumentKind_NullPtr',
        '4': 'CXTemplateArgumentKind_Integral',
        '5': 'CXTemplateArgumentKind_Template',
        '6': 'CXTemplateArgumentKind_TemplateExpansion',
        '7': 'CXTemplateArgumentKind_Expression',
        '8': 'CXTemplateArgumentKind_Pack',
        '9': 'CXTemplateArgumentKind_Invalid',
    },
    'CXCallingConv': {
        CXCallingConv_Default: 0,
        CXCallingConv_C: 1,
        CXCallingConv_X86StdCall: 2,
        CXCallingConv_X86FastCall: 3,
        CXCallingConv_X86ThisCall: 4,
        CXCallingConv_X86Pascal: 5,
        CXCallingConv_AAPCS: 6,
        CXCallingConv_AAPCS_VFP: 7,
        CXCallingConv_X86RegCall: 8,
        CXCallingConv_IntelOclBicc: 9,
        CXCallingConv_Win64: 10,
        CXCallingConv_X86_64Win64: 10,
        CXCallingConv_X86_64SysV: 11,
        CXCallingConv_X86VectorCall: 12,
        CXCallingConv_Swift: 13,
        CXCallingConv_PreserveMost: 14,
        CXCallingConv_PreserveAll: 15,
        CXCallingConv_AArch64VectorCall: 16,
        CXCallingConv_Invalid: 100,
        CXCallingConv_Unexposed: 200,
        '0': 'CXCallingConv_Default',
        '1': 'CXCallingConv_C',
        '2': 'CXCallingConv_X86StdCall',
        '3': 'CXCallingConv_X86FastCall',
        '4': 'CXCallingConv_X86ThisCall',
        '5': 'CXCallingConv_X86Pascal',
        '6': 'CXCallingConv_AAPCS',
        '7': 'CXCallingConv_AAPCS_VFP',
        '8': 'CXCallingConv_X86RegCall',
        '9': 'CXCallingConv_IntelOclBicc',
        '10': 'CXCallingConv_Win64',
        '10': 'CXCallingConv_X86_64Win64',
        '11': 'CXCallingConv_X86_64SysV',
        '12': 'CXCallingConv_X86VectorCall',
        '13': 'CXCallingConv_Swift',
        '14': 'CXCallingConv_PreserveMost',
        '15': 'CXCallingConv_PreserveAll',
        '16': 'CXCallingConv_AArch64VectorCall',
        '100': 'CXCallingConv_Invalid',
        '200': 'CXCallingConv_Unexposed',
    },
    'CXTypeNullabilityKind': {
        CXTypeNullability_NonNull: 0,
        CXTypeNullability_Nullable: 1,
        CXTypeNullability_Unspecified: 2,
        CXTypeNullability_Invalid: 3,
        '0': 'CXTypeNullability_NonNull',
        '1': 'CXTypeNullability_Nullable',
        '2': 'CXTypeNullability_Unspecified',
        '3': 'CXTypeNullability_Invalid',
    },
    'CXRefQualifierKind': {
        CXRefQualifier_None: 0,
        CXRefQualifier_LValue: 1,
        CXRefQualifier_RValue: 2,
        '0': 'CXRefQualifier_None',
        '1': 'CXRefQualifier_LValue',
        '2': 'CXRefQualifier_RValue',
    },
    'CX_CXXAccessSpecifier': {
        CX_CXXInvalidAccessSpecifier: 0,
        CX_CXXPublic: 1,
        CX_CXXProtected: 2,
        CX_CXXPrivate: 3,
        '0': 'CX_CXXInvalidAccessSpecifier',
        '1': 'CX_CXXPublic',
        '2': 'CX_CXXProtected',
        '3': 'CX_CXXPrivate',
    },
    'CX_StorageClass': {
        CX_SC_Invalid: 0,
        CX_SC_None: 1,
        CX_SC_Extern: 2,
        CX_SC_Static: 3,
        CX_SC_PrivateExtern: 4,
        CX_SC_OpenCLWorkGroupLocal: 5,
        CX_SC_Auto: 6,
        CX_SC_Register: 7,
        '0': 'CX_SC_Invalid',
        '1': 'CX_SC_None',
        '2': 'CX_SC_Extern',
        '3': 'CX_SC_Static',
        '4': 'CX_SC_PrivateExtern',
        '5': 'CX_SC_OpenCLWorkGroupLocal',
        '6': 'CX_SC_Auto',
        '7': 'CX_SC_Register',
    },
    'CXChildVisitResult': {
        CXChildVisit_Break: 0,
        CXChildVisit_Continue: 1,
        CXChildVisit_Recurse: 2,
        '0': 'CXChildVisit_Break',
        '1': 'CXChildVisit_Continue',
        '2': 'CXChildVisit_Recurse',
    },
    'CXPrintingPolicyProperty': {
        CXPrintingPolicy_Indentation: 0,
        CXPrintingPolicy_SuppressSpecifiers: 1,
        CXPrintingPolicy_SuppressTagKeyword: 2,
        CXPrintingPolicy_IncludeTagDefinition: 3,
        CXPrintingPolicy_SuppressScope: 4,
        CXPrintingPolicy_SuppressUnwrittenScope: 5,
        CXPrintingPolicy_SuppressInitializers: 6,
        CXPrintingPolicy_ConstantArraySizeAsWritten: 7,
        CXPrintingPolicy_AnonymousTagLocations: 8,
        CXPrintingPolicy_SuppressStrongLifetime: 9,
        CXPrintingPolicy_SuppressLifetimeQualifiers: 10,
        CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors: 11,
        CXPrintingPolicy_Bool: 12,
        CXPrintingPolicy_Restrict: 13,
        CXPrintingPolicy_Alignof: 14,
        CXPrintingPolicy_UnderscoreAlignof: 15,
        CXPrintingPolicy_UseVoidForZeroParams: 16,
        CXPrintingPolicy_TerseOutput: 17,
        CXPrintingPolicy_PolishForDeclaration: 18,
        CXPrintingPolicy_Half: 19,
        CXPrintingPolicy_MSWChar: 20,
        CXPrintingPolicy_IncludeNewlines: 21,
        CXPrintingPolicy_MSVCFormatting: 22,
        CXPrintingPolicy_ConstantsAsWritten: 23,
        CXPrintingPolicy_SuppressImplicitBase: 24,
        CXPrintingPolicy_FullyQualifiedName: 25,
        CXPrintingPolicy_LastProperty: 25,
        '0': 'CXPrintingPolicy_Indentation',
        '1': 'CXPrintingPolicy_SuppressSpecifiers',
        '2': 'CXPrintingPolicy_SuppressTagKeyword',
        '3': 'CXPrintingPolicy_IncludeTagDefinition',
        '4': 'CXPrintingPolicy_SuppressScope',
        '5': 'CXPrintingPolicy_SuppressUnwrittenScope',
        '6': 'CXPrintingPolicy_SuppressInitializers',
        '7': 'CXPrintingPolicy_ConstantArraySizeAsWritten',
        '8': 'CXPrintingPolicy_AnonymousTagLocations',
        '9': 'CXPrintingPolicy_SuppressStrongLifetime',
        '10': 'CXPrintingPolicy_SuppressLifetimeQualifiers',
        '11': 'CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors',
        '12': 'CXPrintingPolicy_Bool',
        '13': 'CXPrintingPolicy_Restrict',
        '14': 'CXPrintingPolicy_Alignof',
        '15': 'CXPrintingPolicy_UnderscoreAlignof',
        '16': 'CXPrintingPolicy_UseVoidForZeroParams',
        '17': 'CXPrintingPolicy_TerseOutput',
        '18': 'CXPrintingPolicy_PolishForDeclaration',
        '19': 'CXPrintingPolicy_Half',
        '20': 'CXPrintingPolicy_MSWChar',
        '21': 'CXPrintingPolicy_IncludeNewlines',
        '22': 'CXPrintingPolicy_MSVCFormatting',
        '23': 'CXPrintingPolicy_ConstantsAsWritten',
        '24': 'CXPrintingPolicy_SuppressImplicitBase',
        '25': 'CXPrintingPolicy_FullyQualifiedName',
        '25': 'CXPrintingPolicy_LastProperty',
    },
    'CXTokenKind': {
        CXToken_Punctuation: 0,
        CXToken_Keyword: 1,
        CXToken_Identifier: 2,
        CXToken_Literal: 3,
        CXToken_Comment: 4,
        '0': 'CXToken_Punctuation',
        '1': 'CXToken_Keyword',
        '2': 'CXToken_Identifier',
        '3': 'CXToken_Literal',
        '4': 'CXToken_Comment',
    },
    'CXCompletionChunkKind': {
        CXCompletionChunk_Optional: 0,
        CXCompletionChunk_TypedText: 1,
        CXCompletionChunk_Text: 2,
        CXCompletionChunk_Placeholder: 3,
        CXCompletionChunk_Informative: 4,
        CXCompletionChunk_CurrentParameter: 5,
        CXCompletionChunk_LeftParen: 6,
        CXCompletionChunk_RightParen: 7,
        CXCompletionChunk_LeftBracket: 8,
        CXCompletionChunk_RightBracket: 9,
        CXCompletionChunk_LeftBrace: 10,
        CXCompletionChunk_RightBrace: 11,
        CXCompletionChunk_LeftAngle: 12,
        CXCompletionChunk_RightAngle: 13,
        CXCompletionChunk_Comma: 14,
        CXCompletionChunk_ResultType: 15,
        CXCompletionChunk_Colon: 16,
        CXCompletionChunk_SemiColon: 17,
        CXCompletionChunk_Equal: 18,
        CXCompletionChunk_HorizontalSpace: 19,
        CXCompletionChunk_VerticalSpace: 20,
        '0': 'CXCompletionChunk_Optional',
        '1': 'CXCompletionChunk_TypedText',
        '2': 'CXCompletionChunk_Text',
        '3': 'CXCompletionChunk_Placeholder',
        '4': 'CXCompletionChunk_Informative',
        '5': 'CXCompletionChunk_CurrentParameter',
        '6': 'CXCompletionChunk_LeftParen',
        '7': 'CXCompletionChunk_RightParen',
        '8': 'CXCompletionChunk_LeftBracket',
        '9': 'CXCompletionChunk_RightBracket',
        '10': 'CXCompletionChunk_LeftBrace',
        '11': 'CXCompletionChunk_RightBrace',
        '12': 'CXCompletionChunk_LeftAngle',
        '13': 'CXCompletionChunk_RightAngle',
        '14': 'CXCompletionChunk_Comma',
        '15': 'CXCompletionChunk_ResultType',
        '16': 'CXCompletionChunk_Colon',
        '17': 'CXCompletionChunk_SemiColon',
        '18': 'CXCompletionChunk_Equal',
        '19': 'CXCompletionChunk_HorizontalSpace',
        '20': 'CXCompletionChunk_VerticalSpace',
    },
    '': {
        CXEval_Int: 1,
        CXEval_Float: 2,
        CXEval_ObjCStrLiteral: 3,
        CXEval_StrLiteral: 4,
        CXEval_CFStr: 5,
        CXEval_Other: 6,
        CXEval_UnExposed: 0,
        CXResult_Success: 0,
        CXResult_Invalid: 1,
        CXResult_VisitBreak: 2,
        CXIdxEntity_Unexposed: 0,
        CXIdxEntity_Typedef: 1,
        CXIdxEntity_Function: 2,
        CXIdxEntity_Variable: 3,
        CXIdxEntity_Field: 4,
        CXIdxEntity_EnumConstant: 5,
        CXIdxEntity_ObjCClass: 6,
        CXIdxEntity_ObjCProtocol: 7,
        CXIdxEntity_ObjCCategory: 8,
        CXIdxEntity_ObjCInstanceMethod: 9,
        CXIdxEntity_ObjCClassMethod: 10,
        CXIdxEntity_ObjCProperty: 11,
        CXIdxEntity_ObjCIvar: 12,
        CXIdxEntity_Enum: 13,
        CXIdxEntity_Struct: 14,
        CXIdxEntity_Union: 15,
        CXIdxEntity_CXXClass: 16,
        CXIdxEntity_CXXNamespace: 17,
        CXIdxEntity_CXXNamespaceAlias: 18,
        CXIdxEntity_CXXStaticVariable: 19,
        CXIdxEntity_CXXStaticMethod: 20,
        CXIdxEntity_CXXInstanceMethod: 21,
        CXIdxEntity_CXXConstructor: 22,
        CXIdxEntity_CXXDestructor: 23,
        CXIdxEntity_CXXConversionFunction: 24,
        CXIdxEntity_CXXTypeAlias: 25,
        CXIdxEntity_CXXInterface: 26,
        CXIdxEntity_NonTemplate: 0,
        CXIdxEntity_Template: 1,
        CXIdxEntity_TemplatePartialSpecialization: 2,
        CXIdxEntity_TemplateSpecialization: 3,
        CXIdxEntityLang_None: 0,
        CXIdxEntityLang_C: 1,
        CXIdxEntityLang_ObjC: 2,
        CXIdxEntityLang_CXX: 3,
        CXIdxEntityLang_Swift: 4,
        CXIdxObjCContainer_ForwardRef: 0,
        CXIdxObjCContainer_Interface: 1,
        CXIdxObjCContainer_Implementation: 2,
        CXIdxAttr_Unexposed: 0,
        CXIdxAttr_IBAction: 1,
        CXIdxAttr_IBOutlet: 2,
        CXIdxAttr_IBOutletCollection: 3,
        '1': 'CXEval_Int',
        '2': 'CXEval_Float',
        '3': 'CXEval_ObjCStrLiteral',
        '4': 'CXEval_StrLiteral',
        '5': 'CXEval_CFStr',
        '6': 'CXEval_Other',
        '0': 'CXEval_UnExposed',
        '0': 'CXResult_Success',
        '1': 'CXResult_Invalid',
        '2': 'CXResult_VisitBreak',
        '0': 'CXIdxEntity_Unexposed',
        '1': 'CXIdxEntity_Typedef',
        '2': 'CXIdxEntity_Function',
        '3': 'CXIdxEntity_Variable',
        '4': 'CXIdxEntity_Field',
        '5': 'CXIdxEntity_EnumConstant',
        '6': 'CXIdxEntity_ObjCClass',
        '7': 'CXIdxEntity_ObjCProtocol',
        '8': 'CXIdxEntity_ObjCCategory',
        '9': 'CXIdxEntity_ObjCInstanceMethod',
        '10': 'CXIdxEntity_ObjCClassMethod',
        '11': 'CXIdxEntity_ObjCProperty',
        '12': 'CXIdxEntity_ObjCIvar',
        '13': 'CXIdxEntity_Enum',
        '14': 'CXIdxEntity_Struct',
        '15': 'CXIdxEntity_Union',
        '16': 'CXIdxEntity_CXXClass',
        '17': 'CXIdxEntity_CXXNamespace',
        '18': 'CXIdxEntity_CXXNamespaceAlias',
        '19': 'CXIdxEntity_CXXStaticVariable',
        '20': 'CXIdxEntity_CXXStaticMethod',
        '21': 'CXIdxEntity_CXXInstanceMethod',
        '22': 'CXIdxEntity_CXXConstructor',
        '23': 'CXIdxEntity_CXXDestructor',
        '24': 'CXIdxEntity_CXXConversionFunction',
        '25': 'CXIdxEntity_CXXTypeAlias',
        '26': 'CXIdxEntity_CXXInterface',
        '0': 'CXIdxEntity_NonTemplate',
        '1': 'CXIdxEntity_Template',
        '2': 'CXIdxEntity_TemplatePartialSpecialization',
        '3': 'CXIdxEntity_TemplateSpecialization',
        '0': 'CXIdxEntityLang_None',
        '1': 'CXIdxEntityLang_C',
        '2': 'CXIdxEntityLang_ObjC',
        '3': 'CXIdxEntityLang_CXX',
        '4': 'CXIdxEntityLang_Swift',
        '0': 'CXIdxObjCContainer_ForwardRef',
        '1': 'CXIdxObjCContainer_Interface',
        '2': 'CXIdxObjCContainer_Implementation',
        '0': 'CXIdxAttr_Unexposed',
        '1': 'CXIdxAttr_IBAction',
        '2': 'CXIdxAttr_IBOutlet',
        '3': 'CXIdxAttr_IBOutletCollection',
    },
    'CXVisitorResult': {
        CXVisit_Break: 0,
        CXVisit_Continue: 1,
        '0': 'CXVisit_Break',
        '1': 'CXVisit_Continue',
    },
};

var CXString = exports.CXString = Struct({
    data: voidPtr,
    private_flags: ref.types.uint32,
});
var CXStringPtr = exports.CXStringPtr = ref.refType(CXString);
var CXStringSet = exports.CXStringSet = Struct({
    Strings: CXStringPtr,
    Count: ref.types.uint32,
});
var CXStringSetPtr = exports.CXStringSetPtr = ref.refType(CXStringSet);
var CXVirtualFileOverlay = exports.CXVirtualFileOverlay = voidPtr;
var CXVirtualFileOverlayPtr = exports.CXVirtualFileOverlayPtr = ref.refType(CXVirtualFileOverlay);
var CXModuleMapDescriptor = exports.CXModuleMapDescriptor = voidPtr;
var CXModuleMapDescriptorPtr = exports.CXModuleMapDescriptorPtr = ref.refType(CXModuleMapDescriptor);
var CXIndex = exports.CXIndex = voidPtr;
var CXIndexPtr = exports.CXIndexPtr = ref.refType(CXIndex);
var CXFile = exports.CXFile = voidPtr;
var CXFilePtr = exports.CXFilePtr = ref.refType(CXFile);
var CXFileUniqueID = exports.CXFileUniqueID = Struct({
    data: ArrayType(ref.types.ulonglong, 3),
});
var CXFileUniqueIDPtr = exports.CXFileUniqueIDPtr = ref.refType(CXFileUniqueID);
var CXTranslationUnit = exports.CXTranslationUnit = voidPtr;
var CXTranslationUnitPtr = exports.CXTranslationUnitPtr = ref.refType(CXTranslationUnit);
var size_t = exports.size_t = voidPtr;
var size_tPtr = exports.size_tPtr = ref.refType(size_t);
var CXSourceLocation = exports.CXSourceLocation = Struct({
    ptr_data: ArrayType(voidPtr, 2),
    int_data: ref.types.uint32,
});
var CXSourceLocationPtr = exports.CXSourceLocationPtr = ref.refType(CXSourceLocation);
var CXSourceRange = exports.CXSourceRange = Struct({
    ptr_data: ArrayType(voidPtr, 2),
    begin_int_data: ref.types.uint32,
    end_int_data: ref.types.uint32,
});
var CXSourceRangePtr = exports.CXSourceRangePtr = ref.refType(CXSourceRange);
var CXSourceRangeList = exports.CXSourceRangeList = Struct({
    count: ref.types.uint32,
    ranges: CXSourceRangePtr,
});
var CXSourceRangeListPtr = exports.CXSourceRangeListPtr = ref.refType(CXSourceRangeList);
var CXDiagnosticSet = exports.CXDiagnosticSet = voidPtr;
var CXDiagnosticSetPtr = exports.CXDiagnosticSetPtr = ref.refType(CXDiagnosticSet);
var CXDiagnostic = exports.CXDiagnostic = voidPtr;
var CXDiagnosticPtr = exports.CXDiagnosticPtr = ref.refType(CXDiagnostic);
var CXTUResourceUsageEntry = exports.CXTUResourceUsageEntry = Struct({
    kind: ref.types.uint32,
    amount: ref.types.ulong,
});
var CXTUResourceUsageEntryPtr = exports.CXTUResourceUsageEntryPtr = ref.refType(CXTUResourceUsageEntry);
var CXTUResourceUsage = exports.CXTUResourceUsage = Struct({
    data: voidPtr,
    numEntries: ref.types.uint32,
    entries: CXTUResourceUsageEntryPtr,
});
var CXTUResourceUsagePtr = exports.CXTUResourceUsagePtr = ref.refType(CXTUResourceUsage);
var CXTargetInfo = exports.CXTargetInfo = voidPtr;
var CXTargetInfoPtr = exports.CXTargetInfoPtr = ref.refType(CXTargetInfo);
var CXCursor = exports.CXCursor = Struct({
    kind: ref.types.uint32,
    xdata: ref.types.int32,
    data: ArrayType(voidPtr, 3),
});
var CXCursorPtr = exports.CXCursorPtr = ref.refType(CXCursor);
var CXVersion = exports.CXVersion = Struct({
    Major: ref.types.int32,
    Minor: ref.types.int32,
    Subminor: ref.types.int32,
});
var CXVersionPtr = exports.CXVersionPtr = ref.refType(CXVersion);
var CXPlatformAvailability = exports.CXPlatformAvailability = Struct({
    Platform: CXString,
    Introduced: CXVersion,
    Deprecated: CXVersion,
    Obsoleted: CXVersion,
    Unavailable: ref.types.int32,
    Message: CXString,
});
var CXPlatformAvailabilityPtr = exports.CXPlatformAvailabilityPtr = ref.refType(CXPlatformAvailability);
var CXCursorSet = exports.CXCursorSet = voidPtr;
var CXCursorSetPtr = exports.CXCursorSetPtr = ref.refType(CXCursorSet);
var CXType = exports.CXType = Struct({
    kind: ref.types.uint32,
    data: ArrayType(voidPtr, 2),
});
var CXTypePtr = exports.CXTypePtr = ref.refType(CXType);
var CXCursorVisitor = exports.CXCursorVisitor = FFI.Function(ref.types.uint32, [
    CXCursor,
    CXCursor,
    voidPtr,
]);
var CXCursorVisitorPtr = exports.CXCursorVisitorPtr = ref.refType(CXCursorVisitor);
var CXClientData = exports.CXClientData = voidPtr;
var CXClientDataPtr = exports.CXClientDataPtr = ref.refType(CXClientData);
var CXPrintingPolicy = exports.CXPrintingPolicy = voidPtr;
var CXPrintingPolicyPtr = exports.CXPrintingPolicyPtr = ref.refType(CXPrintingPolicy);
var CXModule = exports.CXModule = voidPtr;
var CXModulePtr = exports.CXModulePtr = ref.refType(CXModule);
var CXToken = exports.CXToken = Struct({
    int_data: ArrayType(ref.types.uint32, 4),
    ptr_data: voidPtr,
});
var CXTokenPtr = exports.CXTokenPtr = ref.refType(CXToken);
var CXCompletionString = exports.CXCompletionString = voidPtr;
var CXCompletionStringPtr = exports.CXCompletionStringPtr = ref.refType(CXCompletionString);
var CXCompletionResult = exports.CXCompletionResult = Struct({
    CursorKind: ref.types.uint32,
    CompletionString: CXCompletionString,
});
var CXCompletionResultPtr = exports.CXCompletionResultPtr = ref.refType(CXCompletionResult);
var CXCodeCompleteResults = exports.CXCodeCompleteResults = Struct({
    Results: CXCompletionResultPtr,
    NumResults: ref.types.uint32,
});
var CXCodeCompleteResultsPtr = exports.CXCodeCompleteResultsPtr = ref.refType(CXCodeCompleteResults);
var CXInclusionVisitor = exports.CXInclusionVisitor = FFI.Function(ref.types.void, [
    voidPtr,
    voidPtr,
    ref.types.uint32,
    voidPtr,
]);
var CXInclusionVisitorPtr = exports.CXInclusionVisitorPtr = ref.refType(CXInclusionVisitor);
var CXEvalResult = exports.CXEvalResult = voidPtr;
var CXEvalResultPtr = exports.CXEvalResultPtr = ref.refType(CXEvalResult);
var CXRemapping = exports.CXRemapping = voidPtr;
var CXRemappingPtr = exports.CXRemappingPtr = ref.refType(CXRemapping);
var CXCursorAndRangeVisitor = exports.CXCursorAndRangeVisitor = Struct({
    context: voidPtr,
    visit: voidPtr,
});
var CXCursorAndRangeVisitorPtr = exports.CXCursorAndRangeVisitorPtr = ref.refType(CXCursorAndRangeVisitor);
var CXIdxEntityInfo = exports.CXIdxEntityInfo = Struct({
    kind: ref.types.uint32,
    templateKind: ref.types.uint32,
    lang: ref.types.uint32,
    name: ref.types.CString,
    USR: ref.types.CString,
    cursor: CXCursor,
    attributes: voidPtr,
    numAttributes: ref.types.uint32,
});
var CXIdxEntityInfoPtr = exports.CXIdxEntityInfoPtr = ref.refType(CXIdxEntityInfo);
var CXIdxLoc = exports.CXIdxLoc = Struct({
    ptr_data: ArrayType(voidPtr, 2),
    int_data: ref.types.uint32,
});
var CXIdxLocPtr = exports.CXIdxLocPtr = ref.refType(CXIdxLoc);
var CXIdxContainerInfo = exports.CXIdxContainerInfo = Struct({
    cursor: CXCursor,
});
var CXIdxContainerInfoPtr = exports.CXIdxContainerInfoPtr = ref.refType(CXIdxContainerInfo);
var CXIdxDeclInfo = exports.CXIdxDeclInfo = Struct({
    entityInfo: CXIdxEntityInfoPtr,
    cursor: CXCursor,
    loc: CXIdxLoc,
    semanticContainer: CXIdxContainerInfoPtr,
    lexicalContainer: CXIdxContainerInfoPtr,
    isRedeclaration: ref.types.int32,
    isDefinition: ref.types.int32,
    isContainer: ref.types.int32,
    declAsContainer: CXIdxContainerInfoPtr,
    isImplicit: ref.types.int32,
    attributes: voidPtr,
    numAttributes: ref.types.uint32,
    flags: ref.types.uint32,
});
var CXIdxDeclInfoPtr = exports.CXIdxDeclInfoPtr = ref.refType(CXIdxDeclInfo);
var CXIdxObjCContainerDeclInfo = exports.CXIdxObjCContainerDeclInfo = Struct({
    declInfo: CXIdxDeclInfoPtr,
    kind: ref.types.uint32,
});
var CXIdxObjCContainerDeclInfoPtr = exports.CXIdxObjCContainerDeclInfoPtr = ref.refType(CXIdxObjCContainerDeclInfo);
var CXIdxBaseClassInfo = exports.CXIdxBaseClassInfo = Struct({
    base: CXIdxEntityInfoPtr,
    cursor: CXCursor,
    loc: CXIdxLoc,
});
var CXIdxBaseClassInfoPtr = exports.CXIdxBaseClassInfoPtr = ref.refType(CXIdxBaseClassInfo);
var CXIdxObjCProtocolRefListInfo = exports.CXIdxObjCProtocolRefListInfo = Struct({
    protocols: voidPtr,
    numProtocols: ref.types.uint32,
});
var CXIdxObjCProtocolRefListInfoPtr = exports.CXIdxObjCProtocolRefListInfoPtr = ref.refType(CXIdxObjCProtocolRefListInfo);
var CXIdxObjCInterfaceDeclInfo = exports.CXIdxObjCInterfaceDeclInfo = Struct({
    containerInfo: CXIdxObjCContainerDeclInfoPtr,
    superInfo: CXIdxBaseClassInfoPtr,
    protocols: CXIdxObjCProtocolRefListInfoPtr,
});
var CXIdxObjCInterfaceDeclInfoPtr = exports.CXIdxObjCInterfaceDeclInfoPtr = ref.refType(CXIdxObjCInterfaceDeclInfo);
var CXIdxObjCCategoryDeclInfo = exports.CXIdxObjCCategoryDeclInfo = Struct({
    containerInfo: CXIdxObjCContainerDeclInfoPtr,
    objcClass: CXIdxEntityInfoPtr,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
    protocols: CXIdxObjCProtocolRefListInfoPtr,
});
var CXIdxObjCCategoryDeclInfoPtr = exports.CXIdxObjCCategoryDeclInfoPtr = ref.refType(CXIdxObjCCategoryDeclInfo);
var CXIdxObjCPropertyDeclInfo = exports.CXIdxObjCPropertyDeclInfo = Struct({
    declInfo: CXIdxDeclInfoPtr,
    getter: CXIdxEntityInfoPtr,
    setter: CXIdxEntityInfoPtr,
});
var CXIdxObjCPropertyDeclInfoPtr = exports.CXIdxObjCPropertyDeclInfoPtr = ref.refType(CXIdxObjCPropertyDeclInfo);
var CXIdxAttrInfo = exports.CXIdxAttrInfo = Struct({
    kind: ref.types.uint32,
    cursor: CXCursor,
    loc: CXIdxLoc,
});
var CXIdxAttrInfoPtr = exports.CXIdxAttrInfoPtr = ref.refType(CXIdxAttrInfo);
var CXIdxIBOutletCollectionAttrInfo = exports.CXIdxIBOutletCollectionAttrInfo = Struct({
    attrInfo: CXIdxAttrInfoPtr,
    objcClass: CXIdxEntityInfoPtr,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
});
var CXIdxIBOutletCollectionAttrInfoPtr = exports.CXIdxIBOutletCollectionAttrInfoPtr = ref.refType(CXIdxIBOutletCollectionAttrInfo);
var CXIdxCXXClassDeclInfo = exports.CXIdxCXXClassDeclInfo = Struct({
    declInfo: CXIdxDeclInfoPtr,
    bases: voidPtr,
    numBases: ref.types.uint32,
});
var CXIdxCXXClassDeclInfoPtr = exports.CXIdxCXXClassDeclInfoPtr = ref.refType(CXIdxCXXClassDeclInfo);
var CXIdxClientContainer = exports.CXIdxClientContainer = voidPtr;
var CXIdxClientContainerPtr = exports.CXIdxClientContainerPtr = ref.refType(CXIdxClientContainer);
var CXIdxClientEntity = exports.CXIdxClientEntity = voidPtr;
var CXIdxClientEntityPtr = exports.CXIdxClientEntityPtr = ref.refType(CXIdxClientEntity);
var CXIndexAction = exports.CXIndexAction = voidPtr;
var CXIndexActionPtr = exports.CXIndexActionPtr = ref.refType(CXIndexAction);
var IndexerCallbacks = exports.IndexerCallbacks = Struct({
    abortQuery: voidPtr,
    diagnostic: voidPtr,
    enteredMainFile: voidPtr,
    ppIncludedFile: voidPtr,
    importedASTFile: voidPtr,
    startedTranslationUnit: voidPtr,
    indexDeclaration: voidPtr,
    indexEntityReference: voidPtr,
});
var IndexerCallbacksPtr = exports.IndexerCallbacksPtr = ref.refType(IndexerCallbacks);
var CXIdxClientFile = exports.CXIdxClientFile = voidPtr;
var CXIdxClientFilePtr = exports.CXIdxClientFilePtr = ref.refType(CXIdxClientFile);
var CXFieldVisitor = exports.CXFieldVisitor = FFI.Function(ref.types.uint32, [
    CXCursor,
    voidPtr,
]);
var CXFieldVisitorPtr = exports.CXFieldVisitorPtr = ref.refType(CXFieldVisitor);

exports.libclang = new FFI.Library('libclang', {
    clang_getCString: [ref.types.CString, [
        CXString,
    ]],
    clang_disposeString: [ref.types.void, [
        CXString,
    ]],
    clang_disposeStringSet: [ref.types.void, [
        CXStringSetPtr,
    ]],
    clang_getBuildSessionTimestamp: [ref.types.ulonglong, []],
    clang_VirtualFileOverlay_create: [CXVirtualFileOverlay, [
        ref.types.uint32,
    ]],
    clang_VirtualFileOverlay_addFileMapping: [ref.types.uint32, [
        CXVirtualFileOverlay,
        ref.types.CString,
        ref.types.CString,
    ]],
    clang_VirtualFileOverlay_setCaseSensitivity: [ref.types.uint32, [
        CXVirtualFileOverlay,
        ref.types.int32,
    ]],
    clang_VirtualFileOverlay_writeToBuffer: [ref.types.uint32, [
        CXVirtualFileOverlay,
        ref.types.uint32,
        voidPtr,
        ref.refType(ref.types.uint32),
    ]],
    clang_free: [ref.types.void, [
        voidPtr,
    ]],
    clang_VirtualFileOverlay_dispose: [ref.types.void, [
        CXVirtualFileOverlay,
    ]],
    clang_ModuleMapDescriptor_create: [CXModuleMapDescriptor, [
        ref.types.uint32,
    ]],
    clang_ModuleMapDescriptor_setFrameworkModuleName: [ref.types.uint32, [
        CXModuleMapDescriptor,
        ref.types.CString,
    ]],
    clang_ModuleMapDescriptor_setUmbrellaHeader: [ref.types.uint32, [
        CXModuleMapDescriptor,
        ref.types.CString,
    ]],
    clang_ModuleMapDescriptor_writeToBuffer: [ref.types.uint32, [
        CXModuleMapDescriptor,
        ref.types.uint32,
        voidPtr,
        ref.refType(ref.types.uint32),
    ]],
    clang_ModuleMapDescriptor_dispose: [ref.types.void, [
        CXModuleMapDescriptor,
    ]],
    clang_createIndex: [CXIndex, [
        ref.types.int32,
        ref.types.int32,
    ]],
    clang_disposeIndex: [ref.types.void, [
        CXIndex,
    ]],
    clang_CXIndex_setGlobalOptions: [ref.types.void, [
        CXIndex,
        ref.types.uint32,
    ]],
    clang_CXIndex_getGlobalOptions: [ref.types.uint32, [
        CXIndex,
    ]],
    clang_CXIndex_setInvocationEmissionPathOption: [ref.types.void, [
        CXIndex,
        ref.types.CString,
    ]],
    clang_getFileName: [CXString, [
        CXFile,
    ]],
    clang_getFileTime: [ref.types.long, [
        CXFile,
    ]],
    clang_getFileUniqueID: [ref.types.int32, [
        CXFile,
        CXFileUniqueIDPtr,
    ]],
    clang_isFileMultipleIncludeGuarded: [ref.types.uint32, [
        CXTranslationUnit,
        CXFile,
    ]],
    clang_getFile: [CXFile, [
        CXTranslationUnit,
        ref.types.CString,
    ]],
    clang_getFileContents: [ref.types.CString, [
        CXTranslationUnit,
        CXFile,
        size_t,
    ]],
    clang_File_isEqual: [ref.types.int32, [
        CXFile,
        CXFile,
    ]],
    clang_File_tryGetRealPathName: [CXString, [
        CXFile,
    ]],
    clang_getNullLocation: [CXSourceLocation, []],
    clang_equalLocations: [ref.types.uint32, [
        CXSourceLocation,
        CXSourceLocation,
    ]],
    clang_getLocation: [CXSourceLocation, [
        CXTranslationUnit,
        CXFile,
        ref.types.uint32,
        ref.types.uint32,
    ]],
    clang_getLocationForOffset: [CXSourceLocation, [
        CXTranslationUnit,
        CXFile,
        ref.types.uint32,
    ]],
    clang_Location_isInSystemHeader: [ref.types.int32, [
        CXSourceLocation,
    ]],
    clang_Location_isFromMainFile: [ref.types.int32, [
        CXSourceLocation,
    ]],
    clang_getNullRange: [CXSourceRange, []],
    clang_getRange: [CXSourceRange, [
        CXSourceLocation,
        CXSourceLocation,
    ]],
    clang_equalRanges: [ref.types.uint32, [
        CXSourceRange,
        CXSourceRange,
    ]],
    clang_Range_isNull: [ref.types.int32, [
        CXSourceRange,
    ]],
    clang_getExpansionLocation: [ref.types.void, [
        CXSourceLocation,
        CXFilePtr,
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
    ]],
    clang_getPresumedLocation: [ref.types.void, [
        CXSourceLocation,
        CXStringPtr,
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
    ]],
    clang_getInstantiationLocation: [ref.types.void, [
        CXSourceLocation,
        CXFilePtr,
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
    ]],
    clang_getSpellingLocation: [ref.types.void, [
        CXSourceLocation,
        CXFilePtr,
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
    ]],
    clang_getFileLocation: [ref.types.void, [
        CXSourceLocation,
        CXFilePtr,
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
    ]],
    clang_getRangeStart: [CXSourceLocation, [
        CXSourceRange,
    ]],
    clang_getRangeEnd: [CXSourceLocation, [
        CXSourceRange,
    ]],
    clang_getSkippedRanges: [CXSourceRangeListPtr, [
        CXTranslationUnit,
        CXFile,
    ]],
    clang_getAllSkippedRanges: [CXSourceRangeListPtr, [
        CXTranslationUnit,
    ]],
    clang_disposeSourceRangeList: [ref.types.void, [
        CXSourceRangeListPtr,
    ]],
    clang_getNumDiagnosticsInSet: [ref.types.uint32, [
        CXDiagnosticSet,
    ]],
    clang_getDiagnosticInSet: [CXDiagnostic, [
        CXDiagnosticSet,
        ref.types.uint32,
    ]],
    clang_loadDiagnostics: [CXDiagnosticSet, [
        ref.types.CString,
        voidPtr,
        CXStringPtr,
    ]],
    clang_disposeDiagnosticSet: [ref.types.void, [
        CXDiagnosticSet,
    ]],
    clang_getChildDiagnostics: [CXDiagnosticSet, [
        CXDiagnostic,
    ]],
    clang_getNumDiagnostics: [ref.types.uint32, [
        CXTranslationUnit,
    ]],
    clang_getDiagnostic: [CXDiagnostic, [
        CXTranslationUnit,
        ref.types.uint32,
    ]],
    clang_getDiagnosticSetFromTU: [CXDiagnosticSet, [
        CXTranslationUnit,
    ]],
    clang_disposeDiagnostic: [ref.types.void, [
        CXDiagnostic,
    ]],
    clang_formatDiagnostic: [CXString, [
        CXDiagnostic,
        ref.types.uint32,
    ]],
    clang_defaultDiagnosticDisplayOptions: [ref.types.uint32, []],
    clang_getDiagnosticSeverity: [ref.types.uint32, [
        CXDiagnostic,
    ]],
    clang_getDiagnosticLocation: [CXSourceLocation, [
        CXDiagnostic,
    ]],
    clang_getDiagnosticSpelling: [CXString, [
        CXDiagnostic,
    ]],
    clang_getDiagnosticOption: [CXString, [
        CXDiagnostic,
        CXStringPtr,
    ]],
    clang_getDiagnosticCategory: [ref.types.uint32, [
        CXDiagnostic,
    ]],
    clang_getDiagnosticCategoryName: [CXString, [
        ref.types.uint32,
    ]],
    clang_getDiagnosticCategoryText: [CXString, [
        CXDiagnostic,
    ]],
    clang_getDiagnosticNumRanges: [ref.types.uint32, [
        CXDiagnostic,
    ]],
    clang_getDiagnosticRange: [CXSourceRange, [
        CXDiagnostic,
        ref.types.uint32,
    ]],
    clang_getDiagnosticNumFixIts: [ref.types.uint32, [
        CXDiagnostic,
    ]],
    clang_getDiagnosticFixIt: [CXString, [
        CXDiagnostic,
        ref.types.uint32,
        CXSourceRangePtr,
    ]],
    clang_getTranslationUnitSpelling: [CXString, [
        CXTranslationUnit,
    ]],
    clang_createTranslationUnitFromSourceFile: [CXTranslationUnit, [
        CXIndex,
        ref.types.CString,
        ref.types.int32,
        voidPtr,
        ref.types.uint32,
        voidPtr,
    ]],
    clang_createTranslationUnit: [CXTranslationUnit, [
        CXIndex,
        ref.types.CString,
    ]],
    clang_createTranslationUnit2: [ref.types.uint32, [
        CXIndex,
        ref.types.CString,
        CXTranslationUnitPtr,
    ]],
    clang_defaultEditingTranslationUnitOptions: [ref.types.uint32, []],
    clang_parseTranslationUnit: [CXTranslationUnit, [
        CXIndex,
        ref.types.CString,
        voidPtr,
        ref.types.int32,
        voidPtr,
        ref.types.uint32,
        ref.types.uint32,
    ]],
    clang_parseTranslationUnit2: [ref.types.uint32, [
        CXIndex,
        ref.types.CString,
        voidPtr,
        ref.types.int32,
        voidPtr,
        ref.types.uint32,
        ref.types.uint32,
        CXTranslationUnitPtr,
    ]],
    clang_parseTranslationUnit2FullArgv: [ref.types.uint32, [
        CXIndex,
        ref.types.CString,
        voidPtr,
        ref.types.int32,
        voidPtr,
        ref.types.uint32,
        ref.types.uint32,
        CXTranslationUnitPtr,
    ]],
    clang_defaultSaveOptions: [ref.types.uint32, [
        CXTranslationUnit,
    ]],
    clang_saveTranslationUnit: [ref.types.int32, [
        CXTranslationUnit,
        ref.types.CString,
        ref.types.uint32,
    ]],
    clang_suspendTranslationUnit: [ref.types.uint32, [
        CXTranslationUnit,
    ]],
    clang_disposeTranslationUnit: [ref.types.void, [
        CXTranslationUnit,
    ]],
    clang_defaultReparseOptions: [ref.types.uint32, [
        CXTranslationUnit,
    ]],
    clang_reparseTranslationUnit: [ref.types.int32, [
        CXTranslationUnit,
        ref.types.uint32,
        voidPtr,
        ref.types.uint32,
    ]],
    clang_getTUResourceUsageName: [ref.types.CString, [
        ref.types.uint32,
    ]],
    clang_getCXTUResourceUsage: [CXTUResourceUsage, [
        CXTranslationUnit,
    ]],
    clang_disposeCXTUResourceUsage: [ref.types.void, [
        CXTUResourceUsage,
    ]],
    clang_getTranslationUnitTargetInfo: [CXTargetInfo, [
        CXTranslationUnit,
    ]],
    clang_TargetInfo_dispose: [ref.types.void, [
        CXTargetInfo,
    ]],
    clang_TargetInfo_getTriple: [CXString, [
        CXTargetInfo,
    ]],
    clang_TargetInfo_getPointerWidth: [ref.types.int32, [
        CXTargetInfo,
    ]],
    clang_getNullCursor: [CXCursor, []],
    clang_getTranslationUnitCursor: [CXCursor, [
        CXTranslationUnit,
    ]],
    clang_equalCursors: [ref.types.uint32, [
        CXCursor,
        CXCursor,
    ]],
    clang_Cursor_isNull: [ref.types.int32, [
        CXCursor,
    ]],
    clang_hashCursor: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getCursorKind: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_isDeclaration: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_isInvalidDeclaration: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_isReference: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_isExpression: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_isStatement: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_isAttribute: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_Cursor_hasAttrs: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_isInvalid: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_isTranslationUnit: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_isPreprocessing: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_isUnexposed: [ref.types.uint32, [
        ref.types.uint32,
    ]],
    clang_getCursorLinkage: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getCursorVisibility: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getCursorAvailability: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getCursorPlatformAvailability: [ref.types.int32, [
        CXCursor,
        ref.refType(ref.types.int32),
        CXStringPtr,
        ref.refType(ref.types.int32),
        CXStringPtr,
        CXPlatformAvailabilityPtr,
        ref.types.int32,
    ]],
    clang_disposeCXPlatformAvailability: [ref.types.void, [
        CXPlatformAvailabilityPtr,
    ]],
    clang_getCursorLanguage: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getCursorTLSKind: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_getTranslationUnit: [CXTranslationUnit, [
        CXCursor,
    ]],
    clang_createCXCursorSet: [CXCursorSet, []],
    clang_disposeCXCursorSet: [ref.types.void, [
        CXCursorSet,
    ]],
    clang_CXCursorSet_contains: [ref.types.uint32, [
        CXCursorSet,
        CXCursor,
    ]],
    clang_CXCursorSet_insert: [ref.types.uint32, [
        CXCursorSet,
        CXCursor,
    ]],
    clang_getCursorSemanticParent: [CXCursor, [
        CXCursor,
    ]],
    clang_getCursorLexicalParent: [CXCursor, [
        CXCursor,
    ]],
    clang_getOverriddenCursors: [ref.types.void, [
        CXCursor,
        voidPtr,
        ref.refType(ref.types.uint32),
    ]],
    clang_disposeOverriddenCursors: [ref.types.void, [
        CXCursorPtr,
    ]],
    clang_getIncludedFile: [CXFile, [
        CXCursor,
    ]],
    clang_getCursor: [CXCursor, [
        CXTranslationUnit,
        CXSourceLocation,
    ]],
    clang_getCursorLocation: [CXSourceLocation, [
        CXCursor,
    ]],
    clang_getCursorExtent: [CXSourceRange, [
        CXCursor,
    ]],
    clang_getCursorType: [CXType, [
        CXCursor,
    ]],
    clang_getTypeSpelling: [CXString, [
        CXType,
    ]],
    clang_getTypedefDeclUnderlyingType: [CXType, [
        CXCursor,
    ]],
    clang_getEnumDeclIntegerType: [CXType, [
        CXCursor,
    ]],
    clang_getEnumConstantDeclValue: [ref.types.longlong, [
        CXCursor,
    ]],
    clang_getEnumConstantDeclUnsignedValue: [ref.types.ulonglong, [
        CXCursor,
    ]],
    clang_getFieldDeclBitWidth: [ref.types.int32, [
        CXCursor,
    ]],
    clang_Cursor_getNumArguments: [ref.types.int32, [
        CXCursor,
    ]],
    clang_Cursor_getArgument: [CXCursor, [
        CXCursor,
        ref.types.uint32,
    ]],
    clang_Cursor_getNumTemplateArguments: [ref.types.int32, [
        CXCursor,
    ]],
    clang_Cursor_getTemplateArgumentKind: [ref.types.uint32, [
        CXCursor,
        ref.types.uint32,
    ]],
    clang_Cursor_getTemplateArgumentType: [CXType, [
        CXCursor,
        ref.types.uint32,
    ]],
    clang_Cursor_getTemplateArgumentValue: [ref.types.longlong, [
        CXCursor,
        ref.types.uint32,
    ]],
    clang_Cursor_getTemplateArgumentUnsignedValue: [ref.types.ulonglong, [
        CXCursor,
        ref.types.uint32,
    ]],
    clang_equalTypes: [ref.types.uint32, [
        CXType,
        CXType,
    ]],
    clang_getCanonicalType: [CXType, [
        CXType,
    ]],
    clang_isConstQualifiedType: [ref.types.uint32, [
        CXType,
    ]],
    clang_Cursor_isMacroFunctionLike: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_isMacroBuiltin: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_isFunctionInlined: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_isVolatileQualifiedType: [ref.types.uint32, [
        CXType,
    ]],
    clang_isRestrictQualifiedType: [ref.types.uint32, [
        CXType,
    ]],
    clang_getAddressSpace: [ref.types.uint32, [
        CXType,
    ]],
    clang_getTypedefName: [CXString, [
        CXType,
    ]],
    clang_getPointeeType: [CXType, [
        CXType,
    ]],
    clang_getTypeDeclaration: [CXCursor, [
        CXType,
    ]],
    clang_getDeclObjCTypeEncoding: [CXString, [
        CXCursor,
    ]],
    clang_Type_getObjCEncoding: [CXString, [
        CXType,
    ]],
    clang_getTypeKindSpelling: [CXString, [
        ref.types.uint32,
    ]],
    clang_getFunctionTypeCallingConv: [ref.types.uint32, [
        CXType,
    ]],
    clang_getResultType: [CXType, [
        CXType,
    ]],
    clang_getExceptionSpecificationType: [ref.types.int32, [
        CXType,
    ]],
    clang_getNumArgTypes: [ref.types.int32, [
        CXType,
    ]],
    clang_getArgType: [CXType, [
        CXType,
        ref.types.uint32,
    ]],
    clang_Type_getObjCObjectBaseType: [CXType, [
        CXType,
    ]],
    clang_Type_getNumObjCProtocolRefs: [ref.types.uint32, [
        CXType,
    ]],
    clang_Type_getObjCProtocolDecl: [CXCursor, [
        CXType,
        ref.types.uint32,
    ]],
    clang_Type_getNumObjCTypeArgs: [ref.types.uint32, [
        CXType,
    ]],
    clang_Type_getObjCTypeArg: [CXType, [
        CXType,
        ref.types.uint32,
    ]],
    clang_isFunctionTypeVariadic: [ref.types.uint32, [
        CXType,
    ]],
    clang_getCursorResultType: [CXType, [
        CXCursor,
    ]],
    clang_getCursorExceptionSpecificationType: [ref.types.int32, [
        CXCursor,
    ]],
    clang_isPODType: [ref.types.uint32, [
        CXType,
    ]],
    clang_getElementType: [CXType, [
        CXType,
    ]],
    clang_getNumElements: [ref.types.longlong, [
        CXType,
    ]],
    clang_getArrayElementType: [CXType, [
        CXType,
    ]],
    clang_getArraySize: [ref.types.longlong, [
        CXType,
    ]],
    clang_Type_getNamedType: [CXType, [
        CXType,
    ]],
    clang_Type_isTransparentTagTypedef: [ref.types.uint32, [
        CXType,
    ]],
    clang_Type_getNullability: [ref.types.uint32, [
        CXType,
    ]],
    clang_Type_getAlignOf: [ref.types.longlong, [
        CXType,
    ]],
    clang_Type_getClassType: [CXType, [
        CXType,
    ]],
    clang_Type_getSizeOf: [ref.types.longlong, [
        CXType,
    ]],
    clang_Type_getOffsetOf: [ref.types.longlong, [
        CXType,
        ref.types.CString,
    ]],
    clang_Type_getModifiedType: [CXType, [
        CXType,
    ]],
    clang_Cursor_getOffsetOfField: [ref.types.longlong, [
        CXCursor,
    ]],
    clang_Cursor_isAnonymous: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_isAnonymousRecordDecl: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_isInlineNamespace: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Type_getNumTemplateArguments: [ref.types.int32, [
        CXType,
    ]],
    clang_Type_getTemplateArgumentAsType: [CXType, [
        CXType,
        ref.types.uint32,
    ]],
    clang_Type_getCXXRefQualifier: [ref.types.uint32, [
        CXType,
    ]],
    clang_Cursor_isBitField: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_isVirtualBase: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getCXXAccessSpecifier: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_getStorageClass: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getNumOverloadedDecls: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getOverloadedDecl: [CXCursor, [
        CXCursor,
        ref.types.uint32,
    ]],
    clang_getIBOutletCollectionType: [CXType, [
        CXCursor,
    ]],
    clang_visitChildren: [ref.types.uint32, [
        CXCursor,
        CXCursorVisitor,
        CXClientData,
    ]],
    clang_getCursorUSR: [CXString, [
        CXCursor,
    ]],
    clang_constructUSR_ObjCClass: [CXString, [
        ref.types.CString,
    ]],
    clang_constructUSR_ObjCCategory: [CXString, [
        ref.types.CString,
        ref.types.CString,
    ]],
    clang_constructUSR_ObjCProtocol: [CXString, [
        ref.types.CString,
    ]],
    clang_constructUSR_ObjCIvar: [CXString, [
        ref.types.CString,
        CXString,
    ]],
    clang_constructUSR_ObjCMethod: [CXString, [
        ref.types.CString,
        ref.types.uint32,
        CXString,
    ]],
    clang_constructUSR_ObjCProperty: [CXString, [
        ref.types.CString,
        CXString,
    ]],
    clang_getCursorSpelling: [CXString, [
        CXCursor,
    ]],
    clang_Cursor_getSpellingNameRange: [CXSourceRange, [
        CXCursor,
        ref.types.uint32,
        ref.types.uint32,
    ]],
    clang_PrintingPolicy_getProperty: [ref.types.uint32, [
        CXPrintingPolicy,
        ref.types.uint32,
    ]],
    clang_PrintingPolicy_setProperty: [ref.types.void, [
        CXPrintingPolicy,
        ref.types.uint32,
        ref.types.uint32,
    ]],
    clang_getCursorPrintingPolicy: [CXPrintingPolicy, [
        CXCursor,
    ]],
    clang_PrintingPolicy_dispose: [ref.types.void, [
        CXPrintingPolicy,
    ]],
    clang_getCursorPrettyPrinted: [CXString, [
        CXCursor,
        CXPrintingPolicy,
    ]],
    clang_getCursorDisplayName: [CXString, [
        CXCursor,
    ]],
    clang_getCursorReferenced: [CXCursor, [
        CXCursor,
    ]],
    clang_getCursorDefinition: [CXCursor, [
        CXCursor,
    ]],
    clang_isCursorDefinition: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getCanonicalCursor: [CXCursor, [
        CXCursor,
    ]],
    clang_Cursor_getObjCSelectorIndex: [ref.types.int32, [
        CXCursor,
    ]],
    clang_Cursor_isDynamicCall: [ref.types.int32, [
        CXCursor,
    ]],
    clang_Cursor_getReceiverType: [CXType, [
        CXCursor,
    ]],
    clang_Cursor_getObjCPropertyAttributes: [ref.types.uint32, [
        CXCursor,
        ref.types.uint32,
    ]],
    clang_Cursor_getObjCPropertyGetterName: [CXString, [
        CXCursor,
    ]],
    clang_Cursor_getObjCPropertySetterName: [CXString, [
        CXCursor,
    ]],
    clang_Cursor_getObjCDeclQualifiers: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_isObjCOptional: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_isVariadic: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_Cursor_isExternalSymbol: [ref.types.uint32, [
        CXCursor,
        CXStringPtr,
        CXStringPtr,
        ref.refType(ref.types.uint32),
    ]],
    clang_Cursor_getCommentRange: [CXSourceRange, [
        CXCursor,
    ]],
    clang_Cursor_getRawCommentText: [CXString, [
        CXCursor,
    ]],
    clang_Cursor_getBriefCommentText: [CXString, [
        CXCursor,
    ]],
    clang_Cursor_getMangling: [CXString, [
        CXCursor,
    ]],
    clang_Cursor_getCXXManglings: [CXStringSetPtr, [
        CXCursor,
    ]],
    clang_Cursor_getObjCManglings: [CXStringSetPtr, [
        CXCursor,
    ]],
    clang_Cursor_getModule: [CXModule, [
        CXCursor,
    ]],
    clang_getModuleForFile: [CXModule, [
        CXTranslationUnit,
        CXFile,
    ]],
    clang_Module_getASTFile: [CXFile, [
        CXModule,
    ]],
    clang_Module_getParent: [CXModule, [
        CXModule,
    ]],
    clang_Module_getName: [CXString, [
        CXModule,
    ]],
    clang_Module_getFullName: [CXString, [
        CXModule,
    ]],
    clang_Module_isSystem: [ref.types.int32, [
        CXModule,
    ]],
    clang_Module_getNumTopLevelHeaders: [ref.types.uint32, [
        CXTranslationUnit,
        CXModule,
    ]],
    clang_Module_getTopLevelHeader: [CXFile, [
        CXTranslationUnit,
        CXModule,
        ref.types.uint32,
    ]],
    clang_CXXConstructor_isConvertingConstructor: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXConstructor_isCopyConstructor: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXConstructor_isDefaultConstructor: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXConstructor_isMoveConstructor: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXField_isMutable: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXMethod_isDefaulted: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXMethod_isPureVirtual: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXMethod_isStatic: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXMethod_isVirtual: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXRecord_isAbstract: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_EnumDecl_isScoped: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_CXXMethod_isConst: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getTemplateCursorKind: [ref.types.uint32, [
        CXCursor,
    ]],
    clang_getSpecializedCursorTemplate: [CXCursor, [
        CXCursor,
    ]],
    clang_getCursorReferenceNameRange: [CXSourceRange, [
        CXCursor,
        ref.types.uint32,
        ref.types.uint32,
    ]],
    clang_getToken: [CXTokenPtr, [
        CXTranslationUnit,
        CXSourceLocation,
    ]],
    clang_getTokenKind: [ref.types.uint32, [
        CXToken,
    ]],
    clang_getTokenSpelling: [CXString, [
        CXTranslationUnit,
        CXToken,
    ]],
    clang_getTokenLocation: [CXSourceLocation, [
        CXTranslationUnit,
        CXToken,
    ]],
    clang_getTokenExtent: [CXSourceRange, [
        CXTranslationUnit,
        CXToken,
    ]],
    clang_tokenize: [ref.types.void, [
        CXTranslationUnit,
        CXSourceRange,
        voidPtr,
        ref.refType(ref.types.uint32),
    ]],
    clang_annotateTokens: [ref.types.void, [
        CXTranslationUnit,
        CXTokenPtr,
        ref.types.uint32,
        CXCursorPtr,
    ]],
    clang_disposeTokens: [ref.types.void, [
        CXTranslationUnit,
        CXTokenPtr,
        ref.types.uint32,
    ]],
    clang_getCursorKindSpelling: [CXString, [
        ref.types.uint32,
    ]],
    clang_getDefinitionSpellingAndExtent: [ref.types.void, [
        CXCursor,
        voidPtr,
        voidPtr,
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
    ]],
    clang_enableStackTraces: [ref.types.void, []],
    clang_executeOnThread: [ref.types.void, [
        voidPtr,
        voidPtr,
        ref.types.uint32,
    ]],
    clang_getCompletionChunkKind: [ref.types.uint32, [
        CXCompletionString,
        ref.types.uint32,
    ]],
    clang_getCompletionChunkText: [CXString, [
        CXCompletionString,
        ref.types.uint32,
    ]],
    clang_getCompletionChunkCompletionString: [CXCompletionString, [
        CXCompletionString,
        ref.types.uint32,
    ]],
    clang_getNumCompletionChunks: [ref.types.uint32, [
        CXCompletionString,
    ]],
    clang_getCompletionPriority: [ref.types.uint32, [
        CXCompletionString,
    ]],
    clang_getCompletionAvailability: [ref.types.uint32, [
        CXCompletionString,
    ]],
    clang_getCompletionNumAnnotations: [ref.types.uint32, [
        CXCompletionString,
    ]],
    clang_getCompletionAnnotation: [CXString, [
        CXCompletionString,
        ref.types.uint32,
    ]],
    clang_getCompletionParent: [CXString, [
        CXCompletionString,
        voidPtr,
    ]],
    clang_getCompletionBriefComment: [CXString, [
        CXCompletionString,
    ]],
    clang_getCursorCompletionString: [CXCompletionString, [
        CXCursor,
    ]],
    clang_getCompletionNumFixIts: [ref.types.uint32, [
        CXCodeCompleteResultsPtr,
        ref.types.uint32,
    ]],
    clang_getCompletionFixIt: [CXString, [
        CXCodeCompleteResultsPtr,
        ref.types.uint32,
        ref.types.uint32,
        CXSourceRangePtr,
    ]],
    clang_defaultCodeCompleteOptions: [ref.types.uint32, []],
    clang_codeCompleteAt: [CXCodeCompleteResultsPtr, [
        CXTranslationUnit,
        ref.types.CString,
        ref.types.uint32,
        ref.types.uint32,
        voidPtr,
        ref.types.uint32,
        ref.types.uint32,
    ]],
    clang_sortCodeCompletionResults: [ref.types.void, [
        CXCompletionResultPtr,
        ref.types.uint32,
    ]],
    clang_disposeCodeCompleteResults: [ref.types.void, [
        CXCodeCompleteResultsPtr,
    ]],
    clang_codeCompleteGetNumDiagnostics: [ref.types.uint32, [
        CXCodeCompleteResultsPtr,
    ]],
    clang_codeCompleteGetDiagnostic: [CXDiagnostic, [
        CXCodeCompleteResultsPtr,
        ref.types.uint32,
    ]],
    clang_codeCompleteGetContexts: [ref.types.ulonglong, [
        CXCodeCompleteResultsPtr,
    ]],
    clang_codeCompleteGetContainerKind: [ref.types.uint32, [
        CXCodeCompleteResultsPtr,
        ref.refType(ref.types.uint32),
    ]],
    clang_codeCompleteGetContainerUSR: [CXString, [
        CXCodeCompleteResultsPtr,
    ]],
    clang_codeCompleteGetObjCSelector: [CXString, [
        CXCodeCompleteResultsPtr,
    ]],
    clang_getClangVersion: [CXString, []],
    clang_toggleCrashRecovery: [ref.types.void, [
        ref.types.uint32,
    ]],
    clang_getInclusions: [ref.types.void, [
        CXTranslationUnit,
        CXInclusionVisitor,
        CXClientData,
    ]],
    clang_Cursor_Evaluate: [CXEvalResult, [
        CXCursor,
    ]],
    clang_EvalResult_getKind: [ref.types.uint32, [
        CXEvalResult,
    ]],
    clang_EvalResult_getAsInt: [ref.types.int32, [
        CXEvalResult,
    ]],
    clang_EvalResult_getAsLongLong: [ref.types.longlong, [
        CXEvalResult,
    ]],
    clang_EvalResult_isUnsignedInt: [ref.types.uint32, [
        CXEvalResult,
    ]],
    clang_EvalResult_getAsUnsigned: [ref.types.ulonglong, [
        CXEvalResult,
    ]],
    clang_EvalResult_getAsDouble: [ref.types.double, [
        CXEvalResult,
    ]],
    clang_EvalResult_getAsStr: [ref.types.CString, [
        CXEvalResult,
    ]],
    clang_EvalResult_dispose: [ref.types.void, [
        CXEvalResult,
    ]],
    clang_getRemappings: [CXRemapping, [
        ref.types.CString,
    ]],
    clang_getRemappingsFromFileList: [CXRemapping, [
        voidPtr,
        ref.types.uint32,
    ]],
    clang_remap_getNumFiles: [ref.types.uint32, [
        CXRemapping,
    ]],
    clang_remap_getFilenames: [ref.types.void, [
        CXRemapping,
        ref.types.uint32,
        CXStringPtr,
        CXStringPtr,
    ]],
    clang_remap_dispose: [ref.types.void, [
        CXRemapping,
    ]],
    clang_findReferencesInFile: [ref.types.uint32, [
        CXCursor,
        CXFile,
        CXCursorAndRangeVisitor,
    ]],
    clang_findIncludesInFile: [ref.types.uint32, [
        CXTranslationUnit,
        CXFile,
        CXCursorAndRangeVisitor,
    ]],
    clang_index_isEntityObjCContainerKind: [ref.types.int32, [
        ref.types.uint32,
    ]],
    clang_index_getObjCContainerDeclInfo: [CXIdxObjCContainerDeclInfoPtr, [
        CXIdxDeclInfoPtr,
    ]],
    clang_index_getObjCInterfaceDeclInfo: [CXIdxObjCInterfaceDeclInfoPtr, [
        CXIdxDeclInfoPtr,
    ]],
    clang_index_getObjCCategoryDeclInfo: [CXIdxObjCCategoryDeclInfoPtr, [
        CXIdxDeclInfoPtr,
    ]],
    clang_index_getObjCProtocolRefListInfo: [CXIdxObjCProtocolRefListInfoPtr, [
        CXIdxDeclInfoPtr,
    ]],
    clang_index_getObjCPropertyDeclInfo: [CXIdxObjCPropertyDeclInfoPtr, [
        CXIdxDeclInfoPtr,
    ]],
    clang_index_getIBOutletCollectionAttrInfo: [CXIdxIBOutletCollectionAttrInfoPtr, [
        CXIdxAttrInfoPtr,
    ]],
    clang_index_getCXXClassDeclInfo: [CXIdxCXXClassDeclInfoPtr, [
        CXIdxDeclInfoPtr,
    ]],
    clang_index_getClientContainer: [CXIdxClientContainer, [
        CXIdxContainerInfoPtr,
    ]],
    clang_index_setClientContainer: [ref.types.void, [
        CXIdxContainerInfoPtr,
        CXIdxClientContainer,
    ]],
    clang_index_getClientEntity: [CXIdxClientEntity, [
        CXIdxEntityInfoPtr,
    ]],
    clang_index_setClientEntity: [ref.types.void, [
        CXIdxEntityInfoPtr,
        CXIdxClientEntity,
    ]],
    clang_IndexAction_create: [CXIndexAction, [
        CXIndex,
    ]],
    clang_IndexAction_dispose: [ref.types.void, [
        CXIndexAction,
    ]],
    clang_indexSourceFile: [ref.types.int32, [
        CXIndexAction,
        CXClientData,
        IndexerCallbacksPtr,
        ref.types.uint32,
        ref.types.uint32,
        ref.types.CString,
        voidPtr,
        ref.types.int32,
        voidPtr,
        ref.types.uint32,
        CXTranslationUnitPtr,
        ref.types.uint32,
    ]],
    clang_indexSourceFileFullArgv: [ref.types.int32, [
        CXIndexAction,
        CXClientData,
        IndexerCallbacksPtr,
        ref.types.uint32,
        ref.types.uint32,
        ref.types.CString,
        voidPtr,
        ref.types.int32,
        voidPtr,
        ref.types.uint32,
        CXTranslationUnitPtr,
        ref.types.uint32,
    ]],
    clang_indexTranslationUnit: [ref.types.int32, [
        CXIndexAction,
        CXClientData,
        IndexerCallbacksPtr,
        ref.types.uint32,
        ref.types.uint32,
        CXTranslationUnit,
    ]],
    clang_indexLoc_getFileLocation: [ref.types.void, [
        CXIdxLoc,
        CXIdxClientFile,
        CXFilePtr,
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
        ref.refType(ref.types.uint32),
    ]],
    clang_indexLoc_getCXSourceLocation: [CXSourceLocation, [
        CXIdxLoc,
    ]],
    clang_Type_visitFields: [ref.types.uint32, [
        CXType,
        CXFieldVisitor,
        CXClientData,
    ]],
});